/*
 * generated by Xtext 2.15.0
 */
grammar InternalModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package eu.jgen.notes.dmw.lite.mdl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.jgen.notes.dmw.lite.mdl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.jgen.notes.dmw.lite.mdl.services.ModelGrammarAccess;

}

@parser::members {

 	private ModelGrammarAccess grammarAccess;

    public InternalModelParser(TokenStream input, ModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "YModel";
   	}

   	@Override
   	protected ModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleYModel
entryRuleYModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYModelRule()); }
	iv_ruleYModel=ruleYModel
	{ $current=$iv_ruleYModel.current; }
	EOF;

// Rule YModel
ruleYModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getYModelAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYModelAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYModelRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getYModelAccess().getSemicolonKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYModelAccess().getImportsYImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleYImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYModelAccess().getAnnotationsYAnnotationParserRuleCall_4_0());
				}
				lv_annotations_4_0=ruleYAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYModelRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_4_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleYImport
entryRuleYImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYImportRule()); }
	iv_ruleYImport=ruleYImport
	{ $current=$iv_ruleYImport.current; }
	EOF;

// Rule YImport
ruleYImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getYImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getYImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleYAnnotation
entryRuleYAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotationRule()); }
	iv_ruleYAnnotation=ruleYAnnotation
	{ $current=$iv_ruleYAnnotation.current; }
	EOF;

// Rule YAnnotation
ruleYAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAnnotationAccess().getYAnnotEntityParserRuleCall_0());
		}
		this_YAnnotEntity_0=ruleYAnnotEntity
		{
			$current = $this_YAnnotEntity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYAnnotationAccess().getYAnnotTechnicalDesignParserRuleCall_1());
		}
		this_YAnnotTechnicalDesign_1=ruleYAnnotTechnicalDesign
		{
			$current = $this_YAnnotTechnicalDesign_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYAnnotEntity
entryRuleYAnnotEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotEntityRule()); }
	iv_ruleYAnnotEntity=ruleYAnnotEntity
	{ $current=$iv_ruleYAnnotEntity.current; }
	EOF;

// Rule YAnnotEntity
ruleYAnnotEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotEntityAccess().getYAnnotEntityAction_0(),
					$current);
			}
		)
		otherlv_1='@entity'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotEntityAccess().getEntityKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotEntityAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('(')=>
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getYAnnotEntityAccess().getLeftParenthesisKeyword_3_0());
				}
			)
			(
				(
					((
						(
							(
								ruleValidID
							)
						)
						'='
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getYAnnotEntityAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_0_0());
						}
						lv_elementValuePairs_4_0=ruleYAnnotationElementValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
							}
							add(
								$current,
								"elementValuePairs",
								lv_elementValuePairs_4_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getYAnnotEntityAccess().getCommaKeyword_3_1_1_0());
					}
					(
						((
							(
								(
									ruleValidID
								)
							)
							'='
						)
						)=>
						(
							{
								newCompositeNode(grammarAccess.getYAnnotEntityAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_1_1_0());
							}
							lv_elementValuePairs_6_0=ruleYAnnotationElementValuePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
								}
								add(
									$current,
									"elementValuePairs",
									lv_elementValuePairs_6_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotEntityAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getYAnnotEntityAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotEntityAccess().getAnnotationsYAnnotEntityInnerParserRuleCall_5_0());
				}
				lv_annotations_9_0=ruleYAnnotEntityInner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_9_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotEntityInner");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getYAnnotEntityAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleYAnnotAttribute
entryRuleYAnnotAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotAttributeRule()); }
	iv_ruleYAnnotAttribute=ruleYAnnotAttribute
	{ $current=$iv_ruleYAnnotAttribute.current; }
	EOF;

// Rule YAnnotAttribute
ruleYAnnotAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotAttributeAccess().getYAnnotAttributeAction_0(),
					$current);
			}
		)
		otherlv_1='@attribute'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotAttributeAccess().getAttributeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotAttributeAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotAttributeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_optional_3_0='?'
				{
					newLeafNode(lv_optional_3_0, grammarAccess.getYAnnotAttributeAccess().getOptionalQuestionMarkKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotAttributeRule());
					}
					setWithLastConsumed($current, "optional", lv_optional_3_0, "?");
				}
			)
		)?
		(
			(
				('(')=>
				otherlv_4='('
				{
					newLeafNode(otherlv_4, grammarAccess.getYAnnotAttributeAccess().getLeftParenthesisKeyword_4_0());
				}
			)
			(
				(
					((
						(
							(
								ruleValidID
							)
						)
						'='
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getYAnnotAttributeAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_0_0());
						}
						lv_elementValuePairs_5_0=ruleYAnnotationElementValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotAttributeRule());
							}
							add(
								$current,
								"elementValuePairs",
								lv_elementValuePairs_5_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getYAnnotAttributeAccess().getCommaKeyword_4_1_1_0());
					}
					(
						((
							(
								(
									ruleValidID
								)
							)
							'='
						)
						)=>
						(
							{
								newCompositeNode(grammarAccess.getYAnnotAttributeAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_1_1_0());
							}
							lv_elementValuePairs_7_0=ruleYAnnotationElementValuePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotAttributeRule());
								}
								add(
									$current,
									"elementValuePairs",
									lv_elementValuePairs_7_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotAttributeAccess().getRightParenthesisKeyword_4_2());
			}
		)?
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getYAnnotAttributeAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotRelationship
entryRuleYAnnotRelationship returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotRelationshipRule()); }
	iv_ruleYAnnotRelationship=ruleYAnnotRelationship
	{ $current=$iv_ruleYAnnotRelationship.current; }
	EOF;

// Rule YAnnotRelationship
ruleYAnnotRelationship returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotRelationshipAccess().getYAnnotRelationshipAction_0(),
					$current);
			}
		)
		otherlv_1='@relationship'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotRelationshipAccess().getRelationshipKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotRelationshipAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotRelationshipRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_optional_3_0='?'
				{
					newLeafNode(lv_optional_3_0, grammarAccess.getYAnnotRelationshipAccess().getOptionalQuestionMarkKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelationshipRule());
					}
					setWithLastConsumed($current, "optional", true, "?");
				}
			)
		)?
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotRelationshipAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelationshipRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotRelationshipAccess().getTargetYAnnotEntityCrossReference_5_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_many_6_0='*'
				{
					newLeafNode(lv_many_6_0, grammarAccess.getYAnnotRelationshipAccess().getManyAsteriskKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelationshipRule());
					}
					setWithLastConsumed($current, "many", true, "*");
				}
			)
		)?
		(
			(
				('(')=>
				otherlv_7='('
				{
					newLeafNode(otherlv_7, grammarAccess.getYAnnotRelationshipAccess().getLeftParenthesisKeyword_7_0());
				}
			)
			(
				(
					((
						(
							(
								ruleValidID
							)
						)
						'='
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getYAnnotRelationshipAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_0_0());
						}
						lv_elementValuePairs_8_0=ruleYAnnotationElementValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotRelationshipRule());
							}
							add(
								$current,
								"elementValuePairs",
								lv_elementValuePairs_8_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9=','
					{
						newLeafNode(otherlv_9, grammarAccess.getYAnnotRelationshipAccess().getCommaKeyword_7_1_1_0());
					}
					(
						((
							(
								(
									ruleValidID
								)
							)
							'='
						)
						)=>
						(
							{
								newCompositeNode(grammarAccess.getYAnnotRelationshipAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_1_1_0());
							}
							lv_elementValuePairs_10_0=ruleYAnnotationElementValuePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotRelationshipRule());
								}
								add(
									$current,
									"elementValuePairs",
									lv_elementValuePairs_10_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getYAnnotRelationshipAccess().getRightParenthesisKeyword_7_2());
			}
		)?
		(
			otherlv_12='<-'
			{
				newLeafNode(otherlv_12, grammarAccess.getYAnnotRelationshipAccess().getLessThanSignHyphenMinusKeyword_8_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotRelationshipRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYAnnotRelationshipAccess().getInverseYAnnotRelationshipCrossReference_8_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_14=';'
			{
				newLeafNode(otherlv_14, grammarAccess.getYAnnotRelationshipAccess().getSemicolonKeyword_9());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotIdentifier
entryRuleYAnnotIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotIdentifierRule()); }
	iv_ruleYAnnotIdentifier=ruleYAnnotIdentifier
	{ $current=$iv_ruleYAnnotIdentifier.current; }
	EOF;

// Rule YAnnotIdentifier
ruleYAnnotIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotIdentifierAccess().getYAnnotIdentifierAction_0(),
					$current);
			}
		)
		otherlv_1='@identifier'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotIdentifierAccess().getIdentifierKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotIdentifierAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotIdentifierRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotIdentifierAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotIdentifierRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getYAnnotIdentifierAccess().getAnnotsYAnnotIdInnerCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getYAnnotIdentifierAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotIdentifierRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getYAnnotIdentifierAccess().getAnnotsYAnnotIdInnerCrossReference_5_1_0());
					}
				)
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getYAnnotIdentifierAccess().getRightParenthesisKeyword_6());
		}
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotIdentifierAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotationElementValuePair
entryRuleYAnnotationElementValuePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotationElementValuePairRule()); }
	iv_ruleYAnnotationElementValuePair=ruleYAnnotationElementValuePair
	{ $current=$iv_ruleYAnnotationElementValuePair.current; }
	EOF;

// Rule YAnnotationElementValuePair
ruleYAnnotationElementValuePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				(
					(
						ruleValidID
					)
				)
				'='
			)
			)=>
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getYAnnotationElementValuePairAccess().getNameValidIDParserRuleCall_0_0_0_0());
						}
						lv_name_0_0=ruleValidID
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotationElementValuePairRule());
							}
							set(
								$current,
								"name",
								lv_name_0_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getYAnnotationElementValuePairAccess().getEqualsSignKeyword_0_0_1());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotationElementValuePairAccess().getValueYAnnotExpressionParserRuleCall_1_0());
				}
				lv_value_2_0=ruleYAnnotExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotationElementValuePairRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYAnnotEntityInner
entryRuleYAnnotEntityInner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotEntityInnerRule()); }
	iv_ruleYAnnotEntityInner=ruleYAnnotEntityInner
	{ $current=$iv_ruleYAnnotEntityInner.current; }
	EOF;

// Rule YAnnotEntityInner
ruleYAnnotEntityInner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotAttributeParserRuleCall_0());
		}
		this_YAnnotAttribute_0=ruleYAnnotAttribute
		{
			$current = $this_YAnnotAttribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotRelationshipParserRuleCall_1());
		}
		this_YAnnotRelationship_1=ruleYAnnotRelationship
		{
			$current = $this_YAnnotRelationship_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotIdentifierParserRuleCall_2());
		}
		this_YAnnotIdentifier_2=ruleYAnnotIdentifier
		{
			$current = $this_YAnnotIdentifier_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYAnnotExpression
entryRuleYAnnotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotExpressionRule()); }
	iv_ruleYAnnotExpression=ruleYAnnotExpression
	{ $current=$iv_ruleYAnnotExpression.current; }
	EOF;

// Rule YAnnotExpression
ruleYAnnotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYAnnotExpressionAccess().getYAnnotKeywordAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotExpressionAccess().getValueValidIDParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleValidID
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYAnnotExpressionAccess().getYAnnotStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getYAnnotExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYAnnotExpressionAccess().getYAnnotNumberConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotExpressionAccess().getValueNumberParserRuleCall_2_1_0());
					}
					lv_value_5_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"eu.jgen.notes.dmw.lite.mdl.Model.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYAnnotExpressionAccess().getYAnnotBoolConstantAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_7_1='true'
						{
							newLeafNode(lv_value_7_1, grammarAccess.getYAnnotExpressionAccess().getValueTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYAnnotExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_1, null);
						}
						    |
						lv_value_7_2='false'
						{
							newLeafNode(lv_value_7_2, grammarAccess.getYAnnotExpressionAccess().getValueFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYAnnotExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYAnnotExpressionAccess().getYAnnotArrayAction_4_0(),
						$current);
				}
			)
			(
				('['
				)=>
				otherlv_9='['
				{
					newLeafNode(otherlv_9, grammarAccess.getYAnnotExpressionAccess().getLeftSquareBracketKeyword_4_1_0());
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getYAnnotExpressionAccess().getElementsYAnnotExpressionParserRuleCall_4_2_0_0());
						}
						lv_elements_10_0=ruleYAnnotExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotExpressionRule());
							}
							add(
								$current,
								"elements",
								lv_elements_10_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_11=','
					{
						newLeafNode(otherlv_11, grammarAccess.getYAnnotExpressionAccess().getCommaKeyword_4_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getYAnnotExpressionAccess().getElementsYAnnotExpressionParserRuleCall_4_2_1_1_0());
							}
							lv_elements_12_0=ruleYAnnotExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotExpressionRule());
								}
								add(
									$current,
									"elements",
									lv_elements_12_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_13=']'
			{
				newLeafNode(otherlv_13, grammarAccess.getYAnnotExpressionAccess().getRightSquareBracketKeyword_4_3());
			}
		)
	)
;

// Entry rule entryRuleYAnnotTechnicalDesign
entryRuleYAnnotTechnicalDesign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotTechnicalDesignRule()); }
	iv_ruleYAnnotTechnicalDesign=ruleYAnnotTechnicalDesign
	{ $current=$iv_ruleYAnnotTechnicalDesign.current; }
	EOF;

// Rule YAnnotTechnicalDesign
ruleYAnnotTechnicalDesign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotTechnicalDesignAccess().getYAnnotTechnicalDesignAction_0(),
					$current);
			}
		)
		otherlv_1='@td'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotTechnicalDesignAccess().getTdKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTechnicalDesignAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTechnicalDesignRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('(')=>
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getYAnnotTechnicalDesignAccess().getLeftParenthesisKeyword_3_0());
				}
			)
			(
				(
					((
						(
							(
								ruleValidID
							)
						)
						'='
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getYAnnotTechnicalDesignAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_0_0());
						}
						lv_elementValuePairs_4_0=ruleYAnnotationElementValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotTechnicalDesignRule());
							}
							add(
								$current,
								"elementValuePairs",
								lv_elementValuePairs_4_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getYAnnotTechnicalDesignAccess().getCommaKeyword_3_1_1_0());
					}
					(
						((
							(
								(
									ruleValidID
								)
							)
							'='
						)
						)=>
						(
							{
								newCompositeNode(grammarAccess.getYAnnotTechnicalDesignAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_1_1_0());
							}
							lv_elementValuePairs_6_0=ruleYAnnotationElementValuePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotTechnicalDesignRule());
								}
								add(
									$current,
									"elementValuePairs",
									lv_elementValuePairs_6_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotTechnicalDesignAccess().getRightParenthesisKeyword_3_2());
			}
		)
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getYAnnotTechnicalDesignAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTechnicalDesignAccess().getFeaturesYAnnotTableParserRuleCall_5_0());
				}
				lv_features_9_0=ruleYAnnotTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTechnicalDesignRule());
					}
					add(
						$current,
						"features",
						lv_features_9_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotTable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getYAnnotTechnicalDesignAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleYAnnotTable
entryRuleYAnnotTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotTableRule()); }
	iv_ruleYAnnotTable=ruleYAnnotTable
	{ $current=$iv_ruleYAnnotTable.current; }
	EOF;

// Rule YAnnotTable
ruleYAnnotTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotTableAccess().getYAnnotTableAction_0(),
					$current);
			}
		)
		otherlv_1='@table'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotTableAccess().getTableKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotTableAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotTableRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getEntityrefYAnnotEntityCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getYAnnotTableAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getColumnsYAnnotAbstractColumnParserRuleCall_6_0());
				}
				lv_columns_6_0=ruleYAnnotAbstractColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_6_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotAbstractColumn");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0());
				}
				lv_primarykey_7_0=ruleYAnnotPrimaryKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					set(
						$current,
						"primarykey",
						lv_primarykey_7_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotPrimaryKey");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getForeignkeysYAnnotForeignKeyParserRuleCall_8_0());
				}
				lv_foreignkeys_8_0=ruleYAnnotForeignKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					add(
						$current,
						"foreignkeys",
						lv_foreignkeys_8_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotForeignKey");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getYAnnotTableAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleYAnnotColumn
entryRuleYAnnotColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotColumnRule()); }
	iv_ruleYAnnotColumn=ruleYAnnotColumn
	{ $current=$iv_ruleYAnnotColumn.current; }
	EOF;

// Rule YAnnotColumn
ruleYAnnotColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotColumnAccess().getYAnnotColumnAction_0(),
					$current);
			}
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotColumnAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotColumnAccess().getAttrrefYAnnotAttributeCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotColumnAccess().getAsKeyword_3());
		}
		(
			(
				(
					lv_type_4_1='VARCHAR'
					{
						newLeafNode(lv_type_4_1, grammarAccess.getYAnnotColumnAccess().getTypeVARCHARKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_1, null);
					}
					    |
					lv_type_4_2='CHAR'
					{
						newLeafNode(lv_type_4_2, grammarAccess.getYAnnotColumnAccess().getTypeCHARKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_2, null);
					}
					    |
					lv_type_4_3='INTEGER'
					{
						newLeafNode(lv_type_4_3, grammarAccess.getYAnnotColumnAccess().getTypeINTEGERKeyword_4_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_3, null);
					}
					    |
					lv_type_4_4='BIGINT'
					{
						newLeafNode(lv_type_4_4, grammarAccess.getYAnnotColumnAccess().getTypeBIGINTKeyword_4_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_4, null);
					}
					    |
					lv_type_4_5='SMALLINT'
					{
						newLeafNode(lv_type_4_5, grammarAccess.getYAnnotColumnAccess().getTypeSMALLINTKeyword_4_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_5, null);
					}
					    |
					lv_type_4_6='DECIMAL'
					{
						newLeafNode(lv_type_4_6, grammarAccess.getYAnnotColumnAccess().getTypeDECIMALKeyword_4_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_6, null);
					}
					    |
					lv_type_4_7='TIME'
					{
						newLeafNode(lv_type_4_7, grammarAccess.getYAnnotColumnAccess().getTypeTIMEKeyword_4_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_7, null);
					}
					    |
					lv_type_4_8='DATE'
					{
						newLeafNode(lv_type_4_8, grammarAccess.getYAnnotColumnAccess().getTypeDATEKeyword_4_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_8, null);
					}
					    |
					lv_type_4_9='TIMESTAMP'
					{
						newLeafNode(lv_type_4_9, grammarAccess.getYAnnotColumnAccess().getTypeTIMESTAMPKeyword_4_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_9, null);
					}
					    |
					lv_type_4_10='BOOLEAN'
					{
						newLeafNode(lv_type_4_10, grammarAccess.getYAnnotColumnAccess().getTypeBOOLEANKeyword_4_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_10, null);
					}
				)
			)
		)
		(
			(
				lv_optional_5_0='?'
				{
					newLeafNode(lv_optional_5_0, grammarAccess.getYAnnotColumnAccess().getOptionalQuestionMarkKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnRule());
					}
					setWithLastConsumed($current, "optional", lv_optional_5_0, "?");
				}
			)
		)?
		(
			(
				('(')=>
				otherlv_6='('
				{
					newLeafNode(otherlv_6, grammarAccess.getYAnnotColumnAccess().getLeftParenthesisKeyword_6_0());
				}
			)
			(
				(
					((
						(
							(
								ruleValidID
							)
						)
						'='
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getYAnnotColumnAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_0_0());
						}
						lv_elementValuePairs_7_0=ruleYAnnotationElementValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYAnnotColumnRule());
							}
							add(
								$current,
								"elementValuePairs",
								lv_elementValuePairs_7_0,
								"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getYAnnotColumnAccess().getCommaKeyword_6_1_1_0());
					}
					(
						((
							(
								(
									ruleValidID
								)
							)
							'='
						)
						)=>
						(
							{
								newCompositeNode(grammarAccess.getYAnnotColumnAccess().getElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_1_1_0());
							}
							lv_elementValuePairs_9_0=ruleYAnnotationElementValuePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYAnnotColumnRule());
								}
								add(
									$current,
									"elementValuePairs",
									lv_elementValuePairs_9_0,
									"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getYAnnotColumnAccess().getRightParenthesisKeyword_6_2());
			}
		)?
		(
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getYAnnotColumnAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotColumnLike
entryRuleYAnnotColumnLike returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotColumnLikeRule()); }
	iv_ruleYAnnotColumnLike=ruleYAnnotColumnLike
	{ $current=$iv_ruleYAnnotColumnLike.current; }
	EOF;

// Rule YAnnotColumnLike
ruleYAnnotColumnLike returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotColumnLikeAccess().getYAnnotColumnLikeAction_0(),
					$current);
			}
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotColumnLikeAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnLikeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotColumnLikeAccess().getColumnrefYAnnotAbstractColumnCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getYAnnotColumnLikeAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotAbstractColumn
entryRuleYAnnotAbstractColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotAbstractColumnRule()); }
	iv_ruleYAnnotAbstractColumn=ruleYAnnotAbstractColumn
	{ $current=$iv_ruleYAnnotAbstractColumn.current; }
	EOF;

// Rule YAnnotAbstractColumn
ruleYAnnotAbstractColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotAbstractColumnAccess().getYAnnotAbstractColumnAction_0(),
					$current);
			}
		)
		otherlv_1='@column'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotAbstractColumnAccess().getColumnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getTypeYAnnotColumnParserRuleCall_3_0_0());
					}
					lv_type_3_1=ruleYAnnotColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
						}
						set(
							$current,
							"type",
							lv_type_3_1,
							"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotColumn");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getTypeYAnnotColumnLikeParserRuleCall_3_0_1());
					}
					lv_type_3_2=ruleYAnnotColumnLike
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
						}
						set(
							$current,
							"type",
							lv_type_3_2,
							"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotColumnLike");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleYAnnotPrimaryKey
entryRuleYAnnotPrimaryKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotPrimaryKeyRule()); }
	iv_ruleYAnnotPrimaryKey=ruleYAnnotPrimaryKey
	{ $current=$iv_ruleYAnnotPrimaryKey.current; }
	EOF;

// Rule YAnnotPrimaryKey
ruleYAnnotPrimaryKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotPrimaryKeyAccess().getYAnnotPrimaryKeyAction_0(),
					$current);
			}
		)
		otherlv_1='@primary'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotPrimaryKeyAccess().getPrimaryKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotPrimaryKeyAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotPrimaryKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getYAnnotPrimaryKeyAccess().getColumnsYAnnotAbstractColumnCrossReference_3_0());
				}
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getYAnnotPrimaryKeyAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotPrimaryKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getYAnnotPrimaryKeyAccess().getColumnsYAnnotAbstractColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getYAnnotPrimaryKeyAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotPrimaryKeyAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotForeignKey
entryRuleYAnnotForeignKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotForeignKeyRule()); }
	iv_ruleYAnnotForeignKey=ruleYAnnotForeignKey
	{ $current=$iv_ruleYAnnotForeignKey.current; }
	EOF;

// Rule YAnnotForeignKey
ruleYAnnotForeignKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotForeignKeyAccess().getYAnnotForeignKeyAction_0(),
					$current);
			}
		)
		otherlv_1='@foreign'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotForeignKeyAccess().getForeignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotForeignKeyRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getRelationshipYAnnotRelationshipCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotForeignKeyAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getColumnsYAnnotAbstractColumnParserRuleCall_4_0());
				}
				lv_columns_4_0=ruleYAnnotAbstractColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotForeignKeyRule());
					}
					add(
						$current,
						"columns",
						lv_columns_4_0,
						"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotAbstractColumn");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getYAnnotForeignKeyAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getColumnsYAnnotAbstractColumnParserRuleCall_5_1_0());
					}
					lv_columns_6_0=ruleYAnnotAbstractColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotForeignKeyRule());
						}
						add(
							$current,
							"columns",
							lv_columns_6_0,
							"eu.jgen.notes.dmw.lite.mdl.Model.YAnnotAbstractColumn");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getYAnnotForeignKeyAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotForeignKeyAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0());
		}
		this_ValidID_0=ruleValidID
		{
			$current.merge(this_ValidID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				('.')=>
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
				}
			)
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1());
			}
			this_ValidID_2=ruleValidID
			{
				$current.merge(this_ValidID_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValidIDRule()); }
	iv_ruleValidID=ruleValidID
	{ $current=$iv_ruleValidID.current.getText(); }
	EOF;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
