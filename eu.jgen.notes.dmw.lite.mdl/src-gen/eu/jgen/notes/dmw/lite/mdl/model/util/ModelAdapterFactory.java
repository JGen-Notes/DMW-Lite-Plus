/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.mdl.model.util;

import eu.jgen.notes.dmw.lite.mdl.model.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see eu.jgen.notes.dmw.lite.mdl.model.ModelPackage
 * @generated
 */
public class ModelAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelSwitch<Adapter> modelSwitch =
    new ModelSwitch<Adapter>()
    {
      @Override
      public Adapter caseYModel(YModel object)
      {
        return createYModelAdapter();
      }
      @Override
      public Adapter caseYImport(YImport object)
      {
        return createYImportAdapter();
      }
      @Override
      public Adapter caseYAnnotation(YAnnotation object)
      {
        return createYAnnotationAdapter();
      }
      @Override
      public Adapter caseYAnnotEntity(YAnnotEntity object)
      {
        return createYAnnotEntityAdapter();
      }
      @Override
      public Adapter caseYAnnotAttribute(YAnnotAttribute object)
      {
        return createYAnnotAttributeAdapter();
      }
      @Override
      public Adapter caseYAnnotRelationship(YAnnotRelationship object)
      {
        return createYAnnotRelationshipAdapter();
      }
      @Override
      public Adapter caseYAnnotIdInner(YAnnotIdInner object)
      {
        return createYAnnotIdInnerAdapter();
      }
      @Override
      public Adapter caseYAnnotIdentifier(YAnnotIdentifier object)
      {
        return createYAnnotIdentifierAdapter();
      }
      @Override
      public Adapter caseYAnnotationElementValuePair(YAnnotationElementValuePair object)
      {
        return createYAnnotationElementValuePairAdapter();
      }
      @Override
      public Adapter caseYAnnotEntityInner(YAnnotEntityInner object)
      {
        return createYAnnotEntityInnerAdapter();
      }
      @Override
      public Adapter caseYAnnotExpression(YAnnotExpression object)
      {
        return createYAnnotExpressionAdapter();
      }
      @Override
      public Adapter caseYAnnotTechnicalDesign(YAnnotTechnicalDesign object)
      {
        return createYAnnotTechnicalDesignAdapter();
      }
      @Override
      public Adapter caseYAnnotTable(YAnnotTable object)
      {
        return createYAnnotTableAdapter();
      }
      @Override
      public Adapter caseYAnnotColumn(YAnnotColumn object)
      {
        return createYAnnotColumnAdapter();
      }
      @Override
      public Adapter caseYAnnotColumnLike(YAnnotColumnLike object)
      {
        return createYAnnotColumnLikeAdapter();
      }
      @Override
      public Adapter caseYAnnotAbstractColumn(YAnnotAbstractColumn object)
      {
        return createYAnnotAbstractColumnAdapter();
      }
      @Override
      public Adapter caseYAnnotPrimaryKey(YAnnotPrimaryKey object)
      {
        return createYAnnotPrimaryKeyAdapter();
      }
      @Override
      public Adapter caseYAnnotForeignKey(YAnnotForeignKey object)
      {
        return createYAnnotForeignKeyAdapter();
      }
      @Override
      public Adapter caseYAnnotJava(YAnnotJava object)
      {
        return createYAnnotJavaAdapter();
      }
      @Override
      public Adapter caseYAnnotSwift(YAnnotSwift object)
      {
        return createYAnnotSwiftAdapter();
      }
      @Override
      public Adapter caseYAnnotDatabase(YAnnotDatabase object)
      {
        return createYAnnotDatabaseAdapter();
      }
      @Override
      public Adapter caseYAnnotKeyword(YAnnotKeyword object)
      {
        return createYAnnotKeywordAdapter();
      }
      @Override
      public Adapter caseYAnnotStringConstant(YAnnotStringConstant object)
      {
        return createYAnnotStringConstantAdapter();
      }
      @Override
      public Adapter caseYAnnotNumberConstant(YAnnotNumberConstant object)
      {
        return createYAnnotNumberConstantAdapter();
      }
      @Override
      public Adapter caseYAnnotBoolConstant(YAnnotBoolConstant object)
      {
        return createYAnnotBoolConstantAdapter();
      }
      @Override
      public Adapter caseYAnnotArray(YAnnotArray object)
      {
        return createYAnnotArrayAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YModel <em>YModel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YModel
   * @generated
   */
  public Adapter createYModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YImport <em>YImport</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YImport
   * @generated
   */
  public Adapter createYImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotation <em>YAnnotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotation
   * @generated
   */
  public Adapter createYAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotEntity <em>YAnnot Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotEntity
   * @generated
   */
  public Adapter createYAnnotEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotAttribute <em>YAnnot Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotAttribute
   * @generated
   */
  public Adapter createYAnnotAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotRelationship <em>YAnnot Relationship</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotRelationship
   * @generated
   */
  public Adapter createYAnnotRelationshipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotIdInner <em>YAnnot Id Inner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotIdInner
   * @generated
   */
  public Adapter createYAnnotIdInnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotIdentifier <em>YAnnot Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotIdentifier
   * @generated
   */
  public Adapter createYAnnotIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotationElementValuePair <em>YAnnotation Element Value Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotationElementValuePair
   * @generated
   */
  public Adapter createYAnnotationElementValuePairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotEntityInner <em>YAnnot Entity Inner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotEntityInner
   * @generated
   */
  public Adapter createYAnnotEntityInnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotExpression <em>YAnnot Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotExpression
   * @generated
   */
  public Adapter createYAnnotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotTechnicalDesign <em>YAnnot Technical Design</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotTechnicalDesign
   * @generated
   */
  public Adapter createYAnnotTechnicalDesignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotTable <em>YAnnot Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotTable
   * @generated
   */
  public Adapter createYAnnotTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumn <em>YAnnot Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumn
   * @generated
   */
  public Adapter createYAnnotColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumnLike <em>YAnnot Column Like</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumnLike
   * @generated
   */
  public Adapter createYAnnotColumnLikeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotAbstractColumn <em>YAnnot Abstract Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotAbstractColumn
   * @generated
   */
  public Adapter createYAnnotAbstractColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotPrimaryKey <em>YAnnot Primary Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotPrimaryKey
   * @generated
   */
  public Adapter createYAnnotPrimaryKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotForeignKey <em>YAnnot Foreign Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotForeignKey
   * @generated
   */
  public Adapter createYAnnotForeignKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotJava <em>YAnnot Java</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotJava
   * @generated
   */
  public Adapter createYAnnotJavaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotSwift <em>YAnnot Swift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotSwift
   * @generated
   */
  public Adapter createYAnnotSwiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotDatabase <em>YAnnot Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotDatabase
   * @generated
   */
  public Adapter createYAnnotDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotKeyword <em>YAnnot Keyword</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotKeyword
   * @generated
   */
  public Adapter createYAnnotKeywordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotStringConstant <em>YAnnot String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotStringConstant
   * @generated
   */
  public Adapter createYAnnotStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotNumberConstant <em>YAnnot Number Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotNumberConstant
   * @generated
   */
  public Adapter createYAnnotNumberConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotBoolConstant <em>YAnnot Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotBoolConstant
   * @generated
   */
  public Adapter createYAnnotBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.mdl.model.YAnnotArray <em>YAnnot Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.mdl.model.YAnnotArray
   * @generated
   */
  public Adapter createYAnnotArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ModelAdapterFactory
