/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.mdl.model.impl;

import eu.jgen.notes.dmw.lite.mdl.model.ModelPackage;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotDatabase;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotTable;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotTechnicalDesign;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>YAnnot Technical Design</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotTechnicalDesignImpl#getDatabase <em>Database</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotTechnicalDesignImpl#getFeatures <em>Features</em>}</li>
 * </ul>
 *
 * @generated
 */
public class YAnnotTechnicalDesignImpl extends YAnnotationImpl implements YAnnotTechnicalDesign
{
  /**
   * The cached value of the '{@link #getDatabase() <em>Database</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDatabase()
   * @generated
   * @ordered
   */
  protected YAnnotDatabase database;

  /**
   * The cached value of the '{@link #getFeatures() <em>Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatures()
   * @generated
   * @ordered
   */
  protected EList<YAnnotTable> features;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YAnnotTechnicalDesignImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.YANNOT_TECHNICAL_DESIGN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YAnnotDatabase getDatabase()
  {
    if (database != null && database.eIsProxy())
    {
      InternalEObject oldDatabase = (InternalEObject)database;
      database = (YAnnotDatabase)eResolveProxy(oldDatabase);
      if (database != oldDatabase)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE, oldDatabase, database));
      }
    }
    return database;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YAnnotDatabase basicGetDatabase()
  {
    return database;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDatabase(YAnnotDatabase newDatabase)
  {
    YAnnotDatabase oldDatabase = database;
    database = newDatabase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE, oldDatabase, database));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<YAnnotTable> getFeatures()
  {
    if (features == null)
    {
      features = new EObjectContainmentEList<YAnnotTable>(YAnnotTable.class, this, ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES);
    }
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES:
        return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE:
        if (resolve) return getDatabase();
        return basicGetDatabase();
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES:
        return getFeatures();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE:
        setDatabase((YAnnotDatabase)newValue);
        return;
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES:
        getFeatures().clear();
        getFeatures().addAll((Collection<? extends YAnnotTable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE:
        setDatabase((YAnnotDatabase)null);
        return;
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES:
        getFeatures().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__DATABASE:
        return database != null;
      case ModelPackage.YANNOT_TECHNICAL_DESIGN__FEATURES:
        return features != null && !features.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //YAnnotTechnicalDesignImpl
