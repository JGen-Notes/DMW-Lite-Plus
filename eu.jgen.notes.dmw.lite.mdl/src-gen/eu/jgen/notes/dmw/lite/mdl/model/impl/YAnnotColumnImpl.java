/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.mdl.model.impl;

import eu.jgen.notes.dmw.lite.mdl.model.ModelPackage;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotAttribute;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumn;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotationElementValuePair;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>YAnnot Column</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotColumnImpl#getAttrref <em>Attrref</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotColumnImpl#getType <em>Type</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotColumnImpl#getOptional <em>Optional</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.mdl.model.impl.YAnnotColumnImpl#getElementValuePairs <em>Element Value Pairs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class YAnnotColumnImpl extends MinimalEObjectImpl.Container implements YAnnotColumn
{
  /**
   * The cached value of the '{@link #getAttrref() <em>Attrref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttrref()
   * @generated
   * @ordered
   */
  protected YAnnotAttribute attrref;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptional()
   * @generated
   * @ordered
   */
  protected static final String OPTIONAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptional()
   * @generated
   * @ordered
   */
  protected String optional = OPTIONAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getElementValuePairs() <em>Element Value Pairs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementValuePairs()
   * @generated
   * @ordered
   */
  protected EList<YAnnotationElementValuePair> elementValuePairs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YAnnotColumnImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.YANNOT_COLUMN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YAnnotAttribute getAttrref()
  {
    if (attrref != null && attrref.eIsProxy())
    {
      InternalEObject oldAttrref = (InternalEObject)attrref;
      attrref = (YAnnotAttribute)eResolveProxy(oldAttrref);
      if (attrref != oldAttrref)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ModelPackage.YANNOT_COLUMN__ATTRREF, oldAttrref, attrref));
      }
    }
    return attrref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YAnnotAttribute basicGetAttrref()
  {
    return attrref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAttrref(YAnnotAttribute newAttrref)
  {
    YAnnotAttribute oldAttrref = attrref;
    attrref = newAttrref;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.YANNOT_COLUMN__ATTRREF, oldAttrref, attrref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.YANNOT_COLUMN__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOptional()
  {
    return optional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOptional(String newOptional)
  {
    String oldOptional = optional;
    optional = newOptional;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.YANNOT_COLUMN__OPTIONAL, oldOptional, optional));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<YAnnotationElementValuePair> getElementValuePairs()
  {
    if (elementValuePairs == null)
    {
      elementValuePairs = new EObjectContainmentEList<YAnnotationElementValuePair>(YAnnotationElementValuePair.class, this, ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS);
    }
    return elementValuePairs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS:
        return ((InternalEList<?>)getElementValuePairs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_COLUMN__ATTRREF:
        if (resolve) return getAttrref();
        return basicGetAttrref();
      case ModelPackage.YANNOT_COLUMN__TYPE:
        return getType();
      case ModelPackage.YANNOT_COLUMN__OPTIONAL:
        return getOptional();
      case ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS:
        return getElementValuePairs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_COLUMN__ATTRREF:
        setAttrref((YAnnotAttribute)newValue);
        return;
      case ModelPackage.YANNOT_COLUMN__TYPE:
        setType((String)newValue);
        return;
      case ModelPackage.YANNOT_COLUMN__OPTIONAL:
        setOptional((String)newValue);
        return;
      case ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS:
        getElementValuePairs().clear();
        getElementValuePairs().addAll((Collection<? extends YAnnotationElementValuePair>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_COLUMN__ATTRREF:
        setAttrref((YAnnotAttribute)null);
        return;
      case ModelPackage.YANNOT_COLUMN__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case ModelPackage.YANNOT_COLUMN__OPTIONAL:
        setOptional(OPTIONAL_EDEFAULT);
        return;
      case ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS:
        getElementValuePairs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.YANNOT_COLUMN__ATTRREF:
        return attrref != null;
      case ModelPackage.YANNOT_COLUMN__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case ModelPackage.YANNOT_COLUMN__OPTIONAL:
        return OPTIONAL_EDEFAULT == null ? optional != null : !OPTIONAL_EDEFAULT.equals(optional);
      case ModelPackage.YANNOT_COLUMN__ELEMENT_VALUE_PAIRS:
        return elementValuePairs != null && !elementValuePairs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", optional: ");
    result.append(optional);
    result.append(')');
    return result.toString();
  }

} //YAnnotColumnImpl
