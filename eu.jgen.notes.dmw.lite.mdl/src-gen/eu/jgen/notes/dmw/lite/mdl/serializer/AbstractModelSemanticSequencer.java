/*
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.mdl.serializer;

import com.google.inject.Inject;
import eu.jgen.notes.dmw.lite.mdl.model.ModelPackage;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotAbstractColumn;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotArray;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotAttribute;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotBoolConstant;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumn;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotColumnLike;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotEntity;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotForeignKey;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotIdentifier;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotKeyword;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotNumberConstant;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotPrimaryKey;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotRelationship;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotStringConstant;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotTable;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotTechnicalDesign;
import eu.jgen.notes.dmw.lite.mdl.model.YAnnotationElementValuePair;
import eu.jgen.notes.dmw.lite.mdl.model.YImport;
import eu.jgen.notes.dmw.lite.mdl.model.YModel;
import eu.jgen.notes.dmw.lite.mdl.services.ModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.YANNOT_ABSTRACT_COLUMN:
				sequence_YAnnotAbstractColumn(context, (YAnnotAbstractColumn) semanticObject); 
				return; 
			case ModelPackage.YANNOT_ARRAY:
				sequence_YAnnotExpression(context, (YAnnotArray) semanticObject); 
				return; 
			case ModelPackage.YANNOT_ATTRIBUTE:
				sequence_YAnnotAttribute(context, (YAnnotAttribute) semanticObject); 
				return; 
			case ModelPackage.YANNOT_BOOL_CONSTANT:
				sequence_YAnnotExpression(context, (YAnnotBoolConstant) semanticObject); 
				return; 
			case ModelPackage.YANNOT_COLUMN:
				sequence_YAnnotColumn(context, (YAnnotColumn) semanticObject); 
				return; 
			case ModelPackage.YANNOT_COLUMN_LIKE:
				sequence_YAnnotColumnLike(context, (YAnnotColumnLike) semanticObject); 
				return; 
			case ModelPackage.YANNOT_ENTITY:
				sequence_YAnnotEntity(context, (YAnnotEntity) semanticObject); 
				return; 
			case ModelPackage.YANNOT_FOREIGN_KEY:
				sequence_YAnnotForeignKey(context, (YAnnotForeignKey) semanticObject); 
				return; 
			case ModelPackage.YANNOT_IDENTIFIER:
				sequence_YAnnotIdentifier(context, (YAnnotIdentifier) semanticObject); 
				return; 
			case ModelPackage.YANNOT_KEYWORD:
				sequence_YAnnotExpression(context, (YAnnotKeyword) semanticObject); 
				return; 
			case ModelPackage.YANNOT_NUMBER_CONSTANT:
				sequence_YAnnotExpression(context, (YAnnotNumberConstant) semanticObject); 
				return; 
			case ModelPackage.YANNOT_PRIMARY_KEY:
				sequence_YAnnotPrimaryKey(context, (YAnnotPrimaryKey) semanticObject); 
				return; 
			case ModelPackage.YANNOT_RELATIONSHIP:
				sequence_YAnnotRelationship(context, (YAnnotRelationship) semanticObject); 
				return; 
			case ModelPackage.YANNOT_STRING_CONSTANT:
				sequence_YAnnotExpression(context, (YAnnotStringConstant) semanticObject); 
				return; 
			case ModelPackage.YANNOT_TABLE:
				sequence_YAnnotTable(context, (YAnnotTable) semanticObject); 
				return; 
			case ModelPackage.YANNOT_TECHNICAL_DESIGN:
				sequence_YAnnotTechnicalDesign(context, (YAnnotTechnicalDesign) semanticObject); 
				return; 
			case ModelPackage.YANNOTATION_ELEMENT_VALUE_PAIR:
				sequence_YAnnotationElementValuePair(context, (YAnnotationElementValuePair) semanticObject); 
				return; 
			case ModelPackage.YIMPORT:
				sequence_YImport(context, (YImport) semanticObject); 
				return; 
			case ModelPackage.YMODEL:
				sequence_YModel(context, (YModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     YAnnotAbstractColumn returns YAnnotAbstractColumn
	 *
	 * Constraint:
	 *     (name=ValidID (type=YAnnotColumn | type=YAnnotColumnLike))
	 */
	protected void sequence_YAnnotAbstractColumn(ISerializationContext context, YAnnotAbstractColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotAttribute returns YAnnotAttribute
	 *     YAnnotIdInner returns YAnnotAttribute
	 *     YAnnotEntityInner returns YAnnotAttribute
	 *
	 * Constraint:
	 *     (name=ValidID optional='?'? (elementValuePairs+=YAnnotationElementValuePair elementValuePairs+=YAnnotationElementValuePair*)?)
	 */
	protected void sequence_YAnnotAttribute(ISerializationContext context, YAnnotAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotColumnLike returns YAnnotColumnLike
	 *
	 * Constraint:
	 *     columnref=[YAnnotAbstractColumn|QualifiedName]
	 */
	protected void sequence_YAnnotColumnLike(ISerializationContext context, YAnnotColumnLike semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotColumnLikeAccess().getColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(ModelPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotColumn returns YAnnotColumn
	 *
	 * Constraint:
	 *     (
	 *         attrref=[YAnnotAttribute|QualifiedName] 
	 *         (
	 *             type='VARCHAR' | 
	 *             type='CHAR' | 
	 *             type='INTEGER' | 
	 *             type='BIGINT' | 
	 *             type='SMALLINT' | 
	 *             type='DECIMAL' | 
	 *             type='TIME' | 
	 *             type='DATE' | 
	 *             type='TIMESTAMP' | 
	 *             type='BOOLEAN'
	 *         ) 
	 *         optional='?'? 
	 *         (elementValuePairs+=YAnnotationElementValuePair elementValuePairs+=YAnnotationElementValuePair*)?
	 *     )
	 */
	protected void sequence_YAnnotColumn(ISerializationContext context, YAnnotColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotation returns YAnnotEntity
	 *     YAnnotEntity returns YAnnotEntity
	 *
	 * Constraint:
	 *     (name=ValidID (elementValuePairs+=YAnnotationElementValuePair elementValuePairs+=YAnnotationElementValuePair*)? annotations+=YAnnotEntityInner*)
	 */
	protected void sequence_YAnnotEntity(ISerializationContext context, YAnnotEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotExpression returns YAnnotArray
	 *
	 * Constraint:
	 *     (elements+=YAnnotExpression elements+=YAnnotExpression*)?
	 */
	protected void sequence_YAnnotExpression(ISerializationContext context, YAnnotArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotExpression returns YAnnotBoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_YAnnotExpression(ISerializationContext context, YAnnotBoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotExpression returns YAnnotKeyword
	 *
	 * Constraint:
	 *     value=ValidID
	 */
	protected void sequence_YAnnotExpression(ISerializationContext context, YAnnotKeyword semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOT_KEYWORD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOT_KEYWORD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotExpressionAccess().getValueValidIDParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotExpression returns YAnnotNumberConstant
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_YAnnotExpression(ISerializationContext context, YAnnotNumberConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOT_NUMBER_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOT_NUMBER_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotExpressionAccess().getValueNumberParserRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotExpression returns YAnnotStringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_YAnnotExpression(ISerializationContext context, YAnnotStringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOT_STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOT_STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotForeignKey returns YAnnotForeignKey
	 *
	 * Constraint:
	 *     (relationship=[YAnnotRelationship|QualifiedName] columns+=YAnnotAbstractColumn columns+=YAnnotAbstractColumn*)
	 */
	protected void sequence_YAnnotForeignKey(ISerializationContext context, YAnnotForeignKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotIdentifier returns YAnnotIdentifier
	 *     YAnnotEntityInner returns YAnnotIdentifier
	 *
	 * Constraint:
	 *     (name=ValidID annots+=[YAnnotIdInner|ID] annots+=[YAnnotIdInner|ID]*)
	 */
	protected void sequence_YAnnotIdentifier(ISerializationContext context, YAnnotIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotPrimaryKey returns YAnnotPrimaryKey
	 *
	 * Constraint:
	 *     (columns+=[YAnnotAbstractColumn|ID]* columns+=[YAnnotAbstractColumn|ID]*)
	 */
	protected void sequence_YAnnotPrimaryKey(ISerializationContext context, YAnnotPrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotRelationship returns YAnnotRelationship
	 *     YAnnotIdInner returns YAnnotRelationship
	 *     YAnnotEntityInner returns YAnnotRelationship
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID 
	 *         optional?='?'? 
	 *         target=[YAnnotEntity|QualifiedName] 
	 *         many?='*'? 
	 *         (elementValuePairs+=YAnnotationElementValuePair elementValuePairs+=YAnnotationElementValuePair*)? 
	 *         inverse=[YAnnotRelationship|QualifiedName]?
	 *     )
	 */
	protected void sequence_YAnnotRelationship(ISerializationContext context, YAnnotRelationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotTable returns YAnnotTable
	 *
	 * Constraint:
	 *     (name=ValidID entityref=[YAnnotEntity|QualifiedName] columns+=YAnnotAbstractColumn* primarykey=YAnnotPrimaryKey? foreignkeys+=YAnnotForeignKey*)
	 */
	protected void sequence_YAnnotTable(ISerializationContext context, YAnnotTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotation returns YAnnotTechnicalDesign
	 *     YAnnotTechnicalDesign returns YAnnotTechnicalDesign
	 *
	 * Constraint:
	 *     (name=ValidID (elementValuePairs+=YAnnotationElementValuePair elementValuePairs+=YAnnotationElementValuePair*)? features+=YAnnotTable*)
	 */
	protected void sequence_YAnnotTechnicalDesign(ISerializationContext context, YAnnotTechnicalDesign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotationElementValuePair returns YAnnotationElementValuePair
	 *
	 * Constraint:
	 *     (name=ValidID value=YAnnotExpression)
	 */
	protected void sequence_YAnnotationElementValuePair(ISerializationContext context, YAnnotationElementValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOTATION_ELEMENT_VALUE_PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOTATION_ELEMENT_VALUE_PAIR__NAME));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YANNOTATION_ELEMENT_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YANNOTATION_ELEMENT_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotationElementValuePairAccess().getNameValidIDParserRuleCall_0_0_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getYAnnotationElementValuePairAccess().getValueYAnnotExpressionParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YImport returns YImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_YImport(ISerializationContext context, YImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.YIMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.YIMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YModel returns YModel
	 *
	 * Constraint:
	 *     (name=QualifiedName imports+=YImport* annotations+=YAnnotation*)
	 */
	protected void sequence_YModel(ISerializationContext context, YModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
