/*
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.mdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class YModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsYImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsYAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		
		//YModel:
		//	('package' name=QualifiedName ';'?)?
		//	imports+=YImport*
		//	annotations+=YAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';'?)? imports+=YImport* annotations+=YAnnotation*
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//imports+=YImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//YImport
		public RuleCall getImportsYImportParserRuleCall_1_0() { return cImportsYImportParserRuleCall_1_0; }
		
		//annotations+=YAnnotation*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }
		
		//YAnnotation
		public RuleCall getAnnotationsYAnnotationParserRuleCall_2_0() { return cAnnotationsYAnnotationParserRuleCall_2_0; }
	}
	public class YImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YImport:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotTechnicalDesignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYAnnotDatabaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYAnnotJavaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYAnnotSwiftParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//YAnnotation:
		//	YAnnotEntity | YAnnotTechnicalDesign | YAnnotDatabase | YAnnotJava | YAnnotSwift;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotEntity | YAnnotTechnicalDesign | YAnnotDatabase | YAnnotJava | YAnnotSwift
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotEntity
		public RuleCall getYAnnotEntityParserRuleCall_0() { return cYAnnotEntityParserRuleCall_0; }
		
		//YAnnotTechnicalDesign
		public RuleCall getYAnnotTechnicalDesignParserRuleCall_1() { return cYAnnotTechnicalDesignParserRuleCall_1; }
		
		//YAnnotDatabase
		public RuleCall getYAnnotDatabaseParserRuleCall_2() { return cYAnnotDatabaseParserRuleCall_2; }
		
		//YAnnotJava
		public RuleCall getYAnnotJavaParserRuleCall_3() { return cYAnnotJavaParserRuleCall_3; }
		
		//YAnnotSwift
		public RuleCall getYAnnotSwiftParserRuleCall_4() { return cYAnnotSwiftParserRuleCall_4; }
	}
	public class YAnnotEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cElementValuePairsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_0_0 = (RuleCall)cElementValuePairsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_1_1_0 = (RuleCall)cElementValuePairsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnnotationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnnotationsYAnnotEntityInnerParserRuleCall_5_0 = (RuleCall)cAnnotationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * Data model
		// */ YAnnotEntity:
		//	{YAnnotEntity}
		//	'@entity' name=ValidID (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//	elementValuePairs+=YAnnotationElementValuePair)*)?
		//	')')? '{'
		//	annotations+=YAnnotEntityInner*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotEntity} '@entity' name=ValidID (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//elementValuePairs+=YAnnotationElementValuePair)*)? ')')? '{' annotations+=YAnnotEntityInner* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotEntity}
		public Action getYAnnotEntityAction_0() { return cYAnnotEntityAction_0; }
		
		//'@entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(=> '(' (elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_3_1_0() { return cElementValuePairsAssignment_3_1_0; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_0_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_0_0; }
		
		//(',' elementValuePairs+=YAnnotationElementValuePair)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_3_1_1_1() { return cElementValuePairsAssignment_3_1_1_1; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_1_1_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//annotations+=YAnnotEntityInner*
		public Assignment getAnnotationsAssignment_5() { return cAnnotationsAssignment_5; }
		
		//YAnnotEntityInner
		public RuleCall getAnnotationsYAnnotEntityInnerParserRuleCall_5_0() { return cAnnotationsYAnnotEntityInnerParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YAnnotAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cOptionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOptionalQuestionMarkKeyword_3_0 = (Keyword)cOptionalAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cElementValuePairsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_0_0 = (RuleCall)cElementValuePairsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_1_1_0 = (RuleCall)cElementValuePairsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YAnnotAttribute:
		//	{YAnnotAttribute} '@attribute' name=ValidID optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//	elementValuePairs+=YAnnotationElementValuePair)*)?
		//	')')? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAttribute} '@attribute' name=ValidID optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAttribute}
		public Action getYAnnotAttributeAction_0() { return cYAnnotAttributeAction_0; }
		
		//'@attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_3() { return cOptionalAssignment_3; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_3_0() { return cOptionalQuestionMarkKeyword_3_0; }
		
		//(=> '(' (elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//(elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_4_1_0() { return cElementValuePairsAssignment_4_1_0; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_0_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_0_0; }
		
		//(',' elementValuePairs+=YAnnotationElementValuePair)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_4_1_1_1() { return cElementValuePairsAssignment_4_1_1_1; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_1_1_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class YAnnotRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotRelationshipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationshipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cOptionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOptionalQuestionMarkKeyword_3_0 = (Keyword)cOptionalAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetYAnnotEntityCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetYAnnotEntityQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cTargetYAnnotEntityCrossReference_5_0.eContents().get(1);
		private final Assignment cManyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cManyAsteriskKeyword_6_0 = (Keyword)cManyAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cElementValuePairsAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_0_0 = (RuleCall)cElementValuePairsAssignment_7_1_0.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cGroup_7_1.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_1_0 = (Keyword)cGroup_7_1_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_1_1_0 = (RuleCall)cElementValuePairsAssignment_7_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLessThanSignHyphenMinusKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInverseAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cInverseYAnnotRelationshipCrossReference_8_1_0 = (CrossReference)cInverseAssignment_8_1.eContents().get(0);
		private final RuleCall cInverseYAnnotRelationshipQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cInverseYAnnotRelationshipCrossReference_8_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////YAnnotDataType:
		////	'Int' | 'Short' | 'Long' | 'String' | 'Date' | 'Time' | 'Timestamp' | 'Double' | 'Bool' | 'Blob'
		////;
		//YAnnotRelationship:
		//	{YAnnotRelationship} '@relationship' name=ValidID optional?='?'? '->'
		//	target=[YAnnotEntity|QualifiedName] many?='*'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//	elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ('<-' inverse=[YAnnotRelationship|QualifiedName])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotRelationship} '@relationship' name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'? (=>
		//'(' (elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ('<-'
		//inverse=[YAnnotRelationship|QualifiedName])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotRelationship}
		public Action getYAnnotRelationshipAction_0() { return cYAnnotRelationshipAction_0; }
		
		//'@relationship'
		public Keyword getRelationshipKeyword_1() { return cRelationshipKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_3() { return cOptionalAssignment_3; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_3_0() { return cOptionalQuestionMarkKeyword_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//target=[YAnnotEntity|QualifiedName]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getTargetYAnnotEntityCrossReference_5_0() { return cTargetYAnnotEntityCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getTargetYAnnotEntityQualifiedNameParserRuleCall_5_0_1() { return cTargetYAnnotEntityQualifiedNameParserRuleCall_5_0_1; }
		
		//many?='*'?
		public Assignment getManyAssignment_6() { return cManyAssignment_6; }
		
		//'*'
		public Keyword getManyAsteriskKeyword_6_0() { return cManyAsteriskKeyword_6_0; }
		
		//(=> '(' (elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//(elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)?
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_7_1_0() { return cElementValuePairsAssignment_7_1_0; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_0_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_0_0; }
		
		//(',' elementValuePairs+=YAnnotationElementValuePair)*
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_1_0() { return cCommaKeyword_7_1_1_0; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_7_1_1_1() { return cElementValuePairsAssignment_7_1_1_1; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_1_1_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_7_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
		
		//('<-' inverse=[YAnnotRelationship|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_8_0() { return cLessThanSignHyphenMinusKeyword_8_0; }
		
		//inverse=[YAnnotRelationship|QualifiedName]
		public Assignment getInverseAssignment_8_1() { return cInverseAssignment_8_1; }
		
		//[YAnnotRelationship|QualifiedName]
		public CrossReference getInverseYAnnotRelationshipCrossReference_8_1_0() { return cInverseYAnnotRelationshipCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getInverseYAnnotRelationshipQualifiedNameParserRuleCall_8_1_0_1() { return cInverseYAnnotRelationshipQualifiedNameParserRuleCall_8_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class YAnnotIdInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotIdInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YAnnotIdInner:
		//	YAnnotAttribute | YAnnotRelationship;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttribute | YAnnotRelationship
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttribute
		public RuleCall getYAnnotAttributeParserRuleCall_0() { return cYAnnotAttributeParserRuleCall_0; }
		
		//YAnnotRelationship
		public RuleCall getYAnnotRelationshipParserRuleCall_1() { return cYAnnotRelationshipParserRuleCall_1; }
	}
	public class YAnnotIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdentifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAnnotsYAnnotIdInnerCrossReference_4_0 = (CrossReference)cAnnotsAssignment_4.eContents().get(0);
		private final RuleCall cAnnotsYAnnotIdInnerIDTerminalRuleCall_4_0_1 = (RuleCall)cAnnotsYAnnotIdInnerCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAnnotsYAnnotIdInnerCrossReference_5_1_0 = (CrossReference)cAnnotsAssignment_5_1.eContents().get(0);
		private final RuleCall cAnnotsYAnnotIdInnerIDTerminalRuleCall_5_1_0_1 = (RuleCall)cAnnotsYAnnotIdInnerCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotIdentifier:
		//	{YAnnotIdentifier} '@identifier' name=ValidID '(' annots+=[YAnnotIdInner] (',' annots+=[YAnnotIdInner])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotIdentifier} '@identifier' name=ValidID '(' annots+=[YAnnotIdInner] (',' annots+=[YAnnotIdInner])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotIdentifier}
		public Action getYAnnotIdentifierAction_0() { return cYAnnotIdentifierAction_0; }
		
		//'@identifier'
		public Keyword getIdentifierKeyword_1() { return cIdentifierKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//annots+=[YAnnotIdInner]
		public Assignment getAnnotsAssignment_4() { return cAnnotsAssignment_4; }
		
		//[YAnnotIdInner]
		public CrossReference getAnnotsYAnnotIdInnerCrossReference_4_0() { return cAnnotsYAnnotIdInnerCrossReference_4_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotIdInnerIDTerminalRuleCall_4_0_1() { return cAnnotsYAnnotIdInnerIDTerminalRuleCall_4_0_1; }
		
		//(',' annots+=[YAnnotIdInner])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//annots+=[YAnnotIdInner]
		public Assignment getAnnotsAssignment_5_1() { return cAnnotsAssignment_5_1; }
		
		//[YAnnotIdInner]
		public CrossReference getAnnotsYAnnotIdInnerCrossReference_5_1_0() { return cAnnotsYAnnotIdInnerCrossReference_5_1_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotIdInnerIDTerminalRuleCall_5_1_0_1() { return cAnnotsYAnnotIdInnerIDTerminalRuleCall_5_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotationElementValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotationElementValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueYAnnotExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//YAnnotationElementValuePair:
		//	=> (name=ValidID '=') value=YAnnotExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (name=ValidID '=') value=YAnnotExpression
		public Group getGroup() { return cGroup; }
		
		//=> (name=ValidID '=')
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ValidID '='
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_0_0() { return cNameValidIDParserRuleCall_0_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//value=YAnnotExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//YAnnotExpression
		public RuleCall getValueYAnnotExpressionParserRuleCall_1_0() { return cValueYAnnotExpressionParserRuleCall_1_0; }
	}
	public class YAnnotEntityInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotEntityInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYAnnotIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YAnnotEntityInner:
		//	YAnnotAttribute | YAnnotRelationship | YAnnotIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttribute | YAnnotRelationship | YAnnotIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttribute
		public RuleCall getYAnnotAttributeParserRuleCall_0() { return cYAnnotAttributeParserRuleCall_0; }
		
		//YAnnotRelationship
		public RuleCall getYAnnotRelationshipParserRuleCall_1() { return cYAnnotRelationshipParserRuleCall_1; }
		
		//YAnnotIdentifier
		public RuleCall getYAnnotIdentifierParserRuleCall_2() { return cYAnnotIdentifierParserRuleCall_2; }
	}
	public class YAnnotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYAnnotKeywordAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValidIDParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cYAnnotStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cYAnnotNumberConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cYAnnotBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cYAnnotArrayAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cElementsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cElementsYAnnotExpressionParserRuleCall_4_2_0_0 = (RuleCall)cElementsAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cElementsYAnnotExpressionParserRuleCall_4_2_1_1_0 = (RuleCall)cElementsAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//YAnnotExpression:
		//	{YAnnotKeyword} value=ValidID | {YAnnotStringConstant} value=STRING | {YAnnotNumberConstant} value=Number |
		//	{YAnnotBoolConstant} value=('true' | 'false') | {YAnnotArray} => ('[') (elements+=YAnnotExpression (','
		//	elements+=YAnnotExpression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotKeyword} value=ValidID | {YAnnotStringConstant} value=STRING | {YAnnotNumberConstant} value=Number |
		//{YAnnotBoolConstant} value=('true' | 'false') | {YAnnotArray} => ('[') (elements+=YAnnotExpression (','
		//elements+=YAnnotExpression)*)? ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{YAnnotKeyword} value=ValidID
		public Group getGroup_0() { return cGroup_0; }
		
		//{YAnnotKeyword}
		public Action getYAnnotKeywordAction_0_0() { return cYAnnotKeywordAction_0_0; }
		
		//value=ValidID
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//ValidID
		public RuleCall getValueValidIDParserRuleCall_0_1_0() { return cValueValidIDParserRuleCall_0_1_0; }
		
		//{YAnnotStringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{YAnnotStringConstant}
		public Action getYAnnotStringConstantAction_1_0() { return cYAnnotStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{YAnnotNumberConstant} value=Number
		public Group getGroup_2() { return cGroup_2; }
		
		//{YAnnotNumberConstant}
		public Action getYAnnotNumberConstantAction_2_0() { return cYAnnotNumberConstantAction_2_0; }
		
		//value=Number
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_2_1_0() { return cValueNumberParserRuleCall_2_1_0; }
		
		//{YAnnotBoolConstant} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{YAnnotBoolConstant}
		public Action getYAnnotBoolConstantAction_3_0() { return cYAnnotBoolConstantAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//{YAnnotArray} => ('[') (elements+=YAnnotExpression (',' elements+=YAnnotExpression)*)? ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{YAnnotArray}
		public Action getYAnnotArrayAction_4_0() { return cYAnnotArrayAction_4_0; }
		
		//=> ('[')
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1_0() { return cLeftSquareBracketKeyword_4_1_0; }
		
		//(elements+=YAnnotExpression (',' elements+=YAnnotExpression)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//elements+=YAnnotExpression
		public Assignment getElementsAssignment_4_2_0() { return cElementsAssignment_4_2_0; }
		
		//YAnnotExpression
		public RuleCall getElementsYAnnotExpressionParserRuleCall_4_2_0_0() { return cElementsYAnnotExpressionParserRuleCall_4_2_0_0; }
		
		//(',' elements+=YAnnotExpression)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//','
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//elements+=YAnnotExpression
		public Assignment getElementsAssignment_4_2_1_1() { return cElementsAssignment_4_2_1_1; }
		
		//YAnnotExpression
		public RuleCall getElementsYAnnotExpressionParserRuleCall_4_2_1_1_0() { return cElementsYAnnotExpressionParserRuleCall_4_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}
	public class YAnnotTechnicalDesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotTechnicalDesign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTechnicalDesignAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_3_0 = (CrossReference)cDatabaseAssignment_3.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesYAnnotTableParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * Start Technical design
		// */ YAnnotTechnicalDesign:
		//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
		//	features+=YAnnotTable*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{' features+=YAnnotTable* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTechnicalDesign}
		public Action getYAnnotTechnicalDesignAction_0() { return cYAnnotTechnicalDesignAction_0; }
		
		//'@td'
		public Keyword getTdKeyword_1() { return cTdKeyword_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_3_0() { return cDatabaseYAnnotDatabaseCrossReference_3_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//features+=YAnnotTable*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }
		
		//YAnnotTable
		public RuleCall getFeaturesYAnnotTableParserRuleCall_5_0() { return cFeaturesYAnnotTableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YAnnotTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityrefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEntityrefYAnnotEntityCrossReference_4_0 = (CrossReference)cEntityrefAssignment_4.eContents().get(0);
		private final RuleCall cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cEntityrefYAnnotEntityCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cColumnsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_6_0 = (RuleCall)cColumnsAssignment_6.eContents().get(0);
		private final Assignment cPrimarykeyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0 = (RuleCall)cPrimarykeyAssignment_7.eContents().get(0);
		private final Assignment cForeignkeysAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cForeignkeysYAnnotForeignKeyParserRuleCall_8_0 = (RuleCall)cForeignkeysAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YAnnotTable:
		//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn*
		//	primarykey=YAnnotPrimaryKey?
		//	foreignkeys+=YAnnotForeignKey*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{' columns+=YAnnotAbstractColumn*
		//primarykey=YAnnotPrimaryKey? foreignkeys+=YAnnotForeignKey* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTable}
		public Action getYAnnotTableAction_0() { return cYAnnotTableAction_0; }
		
		//'@table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//entityref=[YAnnotEntity|QualifiedName]
		public Assignment getEntityrefAssignment_4() { return cEntityrefAssignment_4; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getEntityrefYAnnotEntityCrossReference_4_0() { return cEntityrefYAnnotEntityCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1() { return cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//columns+=YAnnotAbstractColumn*
		public Assignment getColumnsAssignment_6() { return cColumnsAssignment_6; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_6_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_6_0; }
		
		//primarykey=YAnnotPrimaryKey?
		public Assignment getPrimarykeyAssignment_7() { return cPrimarykeyAssignment_7; }
		
		//YAnnotPrimaryKey
		public RuleCall getPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0() { return cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0; }
		
		//foreignkeys+=YAnnotForeignKey*
		public Assignment getForeignkeysAssignment_8() { return cForeignkeysAssignment_8; }
		
		//YAnnotForeignKey
		public RuleCall getForeignkeysYAnnotForeignKeyParserRuleCall_8_0() { return cForeignkeysYAnnotForeignKeyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class YAnnotColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttrrefYAnnotAttributeCrossReference_2_0 = (CrossReference)cAttrrefAssignment_2.eContents().get(0);
		private final RuleCall cAttrrefYAnnotAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAttrrefYAnnotAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTypeVARCHARKeyword_4_0_0 = (Keyword)cTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cTypeCHARKeyword_4_0_1 = (Keyword)cTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cTypeINTEGERKeyword_4_0_2 = (Keyword)cTypeAlternatives_4_0.eContents().get(2);
		private final Keyword cTypeBIGINTKeyword_4_0_3 = (Keyword)cTypeAlternatives_4_0.eContents().get(3);
		private final Keyword cTypeSMALLINTKeyword_4_0_4 = (Keyword)cTypeAlternatives_4_0.eContents().get(4);
		private final Keyword cTypeDECIMALKeyword_4_0_5 = (Keyword)cTypeAlternatives_4_0.eContents().get(5);
		private final Keyword cTypeTIMEKeyword_4_0_6 = (Keyword)cTypeAlternatives_4_0.eContents().get(6);
		private final Keyword cTypeDATEKeyword_4_0_7 = (Keyword)cTypeAlternatives_4_0.eContents().get(7);
		private final Keyword cTypeTIMESTAMPKeyword_4_0_8 = (Keyword)cTypeAlternatives_4_0.eContents().get(8);
		private final Keyword cTypeBOOLEANKeyword_4_0_9 = (Keyword)cTypeAlternatives_4_0.eContents().get(9);
		private final Assignment cOptionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOptionalQuestionMarkKeyword_5_0 = (Keyword)cOptionalAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cElementValuePairsAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_0_0 = (RuleCall)cElementValuePairsAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_1_1_0 = (RuleCall)cElementValuePairsAssignment_6_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotColumn:
		//	{YAnnotColumn} '->' attrref=[YAnnotAttribute|QualifiedName]
		//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
		//	'BOOLEAN') optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
		//	elementValuePairs+=YAnnotationElementValuePair)*)?
		//	')')? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumn} '->' attrref=[YAnnotAttribute|QualifiedName] 'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' |
		//'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN') optional='?'? (=> '('
		//(elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumn}
		public Action getYAnnotColumnAction_0() { return cYAnnotColumnAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//attrref=[YAnnotAttribute|QualifiedName]
		public Assignment getAttrrefAssignment_2() { return cAttrrefAssignment_2; }
		
		//[YAnnotAttribute|QualifiedName]
		public CrossReference getAttrrefYAnnotAttributeCrossReference_2_0() { return cAttrrefYAnnotAttributeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getAttrrefYAnnotAttributeQualifiedNameParserRuleCall_2_0_1() { return cAttrrefYAnnotAttributeQualifiedNameParserRuleCall_2_0_1; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }
		
		//'VARCHAR'
		public Keyword getTypeVARCHARKeyword_4_0_0() { return cTypeVARCHARKeyword_4_0_0; }
		
		//'CHAR'
		public Keyword getTypeCHARKeyword_4_0_1() { return cTypeCHARKeyword_4_0_1; }
		
		//'INTEGER'
		public Keyword getTypeINTEGERKeyword_4_0_2() { return cTypeINTEGERKeyword_4_0_2; }
		
		//'BIGINT'
		public Keyword getTypeBIGINTKeyword_4_0_3() { return cTypeBIGINTKeyword_4_0_3; }
		
		//'SMALLINT'
		public Keyword getTypeSMALLINTKeyword_4_0_4() { return cTypeSMALLINTKeyword_4_0_4; }
		
		//'DECIMAL'
		public Keyword getTypeDECIMALKeyword_4_0_5() { return cTypeDECIMALKeyword_4_0_5; }
		
		//'TIME'
		public Keyword getTypeTIMEKeyword_4_0_6() { return cTypeTIMEKeyword_4_0_6; }
		
		//'DATE'
		public Keyword getTypeDATEKeyword_4_0_7() { return cTypeDATEKeyword_4_0_7; }
		
		//'TIMESTAMP'
		public Keyword getTypeTIMESTAMPKeyword_4_0_8() { return cTypeTIMESTAMPKeyword_4_0_8; }
		
		//'BOOLEAN'
		public Keyword getTypeBOOLEANKeyword_4_0_9() { return cTypeBOOLEANKeyword_4_0_9; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_5() { return cOptionalAssignment_5; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_5_0() { return cOptionalQuestionMarkKeyword_5_0; }
		
		//(=> '(' (elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)? ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//(elementValuePairs+=YAnnotationElementValuePair (',' elementValuePairs+=YAnnotationElementValuePair)*)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_6_1_0() { return cElementValuePairsAssignment_6_1_0; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_0_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_0_0; }
		
		//(',' elementValuePairs+=YAnnotationElementValuePair)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }
		
		//elementValuePairs+=YAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_6_1_1_1() { return cElementValuePairsAssignment_6_1_1_1; }
		
		//YAnnotationElementValuePair
		public RuleCall getElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_1_1_0() { return cElementValuePairsYAnnotationElementValuePairParserRuleCall_6_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotColumnLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotColumnLike");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnLikeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cColumnrefYAnnotAbstractColumnCrossReference_2_0 = (CrossReference)cColumnrefAssignment_2.eContents().get(0);
		private final RuleCall cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cColumnrefYAnnotAbstractColumnCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YAnnotColumnLike:
		//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumnLike}
		public Action getYAnnotColumnLikeAction_0() { return cYAnnotColumnLikeAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//columnref=[YAnnotAbstractColumn|QualifiedName]
		public Assignment getColumnrefAssignment_2() { return cColumnrefAssignment_2; }
		
		//[YAnnotAbstractColumn|QualifiedName]
		public CrossReference getColumnrefYAnnotAbstractColumnCrossReference_2_0() { return cColumnrefYAnnotAbstractColumnCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1() { return cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotAbstractColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotAbstractColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAbstractColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnLikeParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		
		//YAnnotAbstractColumn:
		//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike)
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAbstractColumn}
		public Action getYAnnotAbstractColumnAction_0() { return cYAnnotAbstractColumnAction_0; }
		
		//'@column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//type=(YAnnotColumn | YAnnotColumnLike)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//(YAnnotColumn | YAnnotColumnLike)
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//YAnnotColumn
		public RuleCall getTypeYAnnotColumnParserRuleCall_3_0_0() { return cTypeYAnnotColumnParserRuleCall_3_0_0; }
		
		//YAnnotColumnLike
		public RuleCall getTypeYAnnotColumnLikeParserRuleCall_3_0_1() { return cTypeYAnnotColumnLikeParserRuleCall_3_0_1; }
	}
	public class YAnnotPrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotPrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotPrimaryKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_3_0 = (CrossReference)cColumnsAssignment_3.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_4_1_0 = (CrossReference)cColumnsAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YAnnotPrimaryKey:
		//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotPrimaryKey}
		public Action getYAnnotPrimaryKeyAction_0() { return cYAnnotPrimaryKeyAction_0; }
		
		//'@primary'
		public Keyword getPrimaryKeyword_1() { return cPrimaryKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//columns+=[YAnnotAbstractColumn]*
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_3_0() { return cColumnsYAnnotAbstractColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1; }
		
		//(',' columns+=[YAnnotAbstractColumn])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columns+=[YAnnotAbstractColumn]
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_4_1_0() { return cColumnsYAnnotAbstractColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class YAnnotForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotForeignKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelationshipYAnnotRelationshipCrossReference_2_0 = (CrossReference)cRelationshipAssignment_2.eContents().get(0);
		private final RuleCall cRelationshipYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelationshipYAnnotRelationshipCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0 = (RuleCall)cColumnsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotForeignKey:
		//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRelationship|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
		//	'}' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotForeignKey} '@foreign' relationship=[YAnnotRelationship|QualifiedName] '{' columns+=YAnnotAbstractColumn (','
		//columns+=YAnnotAbstractColumn)* '}' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotForeignKey}
		public Action getYAnnotForeignKeyAction_0() { return cYAnnotForeignKeyAction_0; }
		
		//'@foreign'
		public Keyword getForeignKeyword_1() { return cForeignKeyword_1; }
		
		//relationship=[YAnnotRelationship|QualifiedName]
		public Assignment getRelationshipAssignment_2() { return cRelationshipAssignment_2; }
		
		//[YAnnotRelationship|QualifiedName]
		public CrossReference getRelationshipYAnnotRelationshipCrossReference_2_0() { return cRelationshipYAnnotRelationshipCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelationshipYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1() { return cRelationshipYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_4_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_4_0; }
		
		//(',' columns+=YAnnotAbstractColumn)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_5_1() { return cColumnsAssignment_5_1; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_5_1_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotJavaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_2_1_0 = (CrossReference)cDatabaseAssignment_2_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotJava:
		//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotJava}
		public Action getYAnnotJavaAction_0() { return cYAnnotJavaAction_0; }
		
		//'@java'
		public Keyword getJavaKeyword_1() { return cJavaKeyword_1; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'uses'
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_2_1() { return cDatabaseAssignment_2_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_2_1_0() { return cDatabaseYAnnotDatabaseCrossReference_2_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotSwiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotSwift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotSwiftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwiftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDatabaseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_4_1_0 = (CrossReference)cDatabaseAssignment_4_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotSwift:
		//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotSwift}
		public Action getYAnnotSwiftAction_0() { return cYAnnotSwiftAction_0; }
		
		//'@swift'
		public Keyword getSwiftKeyword_1() { return cSwiftKeyword_1; }
		
		//'module'
		public Keyword getModuleKeyword_2() { return cModuleKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'uses'
		public Keyword getUsesKeyword_4_0() { return cUsesKeyword_4_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_4_1() { return cDatabaseAssignment_4_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_4_1_0() { return cDatabaseYAnnotDatabaseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class YAnnotDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.YAnnotDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatabaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Database Generation Annotations
		// */ YAnnotDatabase:
		//	{YAnnotDatabase} '@database' name=ValidID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDatabase} '@database' name=ValidID ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDatabase}
		public Action getYAnnotDatabaseAction_0() { return cYAnnotDatabaseAction_0; }
		
		//'@database'
		public Keyword getDatabaseKeyword_1() { return cDatabaseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID (=> '.' ValidID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID (=> '.' ValidID)*
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//(=> '.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.mdl.Model.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Number hidden():
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private final YModelElements pYModel;
	private final YImportElements pYImport;
	private final YAnnotationElements pYAnnotation;
	private final YAnnotEntityElements pYAnnotEntity;
	private final YAnnotAttributeElements pYAnnotAttribute;
	private final YAnnotRelationshipElements pYAnnotRelationship;
	private final YAnnotIdInnerElements pYAnnotIdInner;
	private final YAnnotIdentifierElements pYAnnotIdentifier;
	private final YAnnotationElementValuePairElements pYAnnotationElementValuePair;
	private final YAnnotEntityInnerElements pYAnnotEntityInner;
	private final YAnnotExpressionElements pYAnnotExpression;
	private final YAnnotTechnicalDesignElements pYAnnotTechnicalDesign;
	private final YAnnotTableElements pYAnnotTable;
	private final YAnnotColumnElements pYAnnotColumn;
	private final YAnnotColumnLikeElements pYAnnotColumnLike;
	private final YAnnotAbstractColumnElements pYAnnotAbstractColumn;
	private final YAnnotPrimaryKeyElements pYAnnotPrimaryKey;
	private final YAnnotForeignKeyElements pYAnnotForeignKey;
	private final YAnnotJavaElements pYAnnotJava;
	private final YAnnotSwiftElements pYAnnotSwift;
	private final YAnnotDatabaseElements pYAnnotDatabase;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ValidIDElements pValidID;
	private final NumberElements pNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pYModel = new YModelElements();
		this.pYImport = new YImportElements();
		this.pYAnnotation = new YAnnotationElements();
		this.pYAnnotEntity = new YAnnotEntityElements();
		this.pYAnnotAttribute = new YAnnotAttributeElements();
		this.pYAnnotRelationship = new YAnnotRelationshipElements();
		this.pYAnnotIdInner = new YAnnotIdInnerElements();
		this.pYAnnotIdentifier = new YAnnotIdentifierElements();
		this.pYAnnotationElementValuePair = new YAnnotationElementValuePairElements();
		this.pYAnnotEntityInner = new YAnnotEntityInnerElements();
		this.pYAnnotExpression = new YAnnotExpressionElements();
		this.pYAnnotTechnicalDesign = new YAnnotTechnicalDesignElements();
		this.pYAnnotTable = new YAnnotTableElements();
		this.pYAnnotColumn = new YAnnotColumnElements();
		this.pYAnnotColumnLike = new YAnnotColumnLikeElements();
		this.pYAnnotAbstractColumn = new YAnnotAbstractColumnElements();
		this.pYAnnotPrimaryKey = new YAnnotPrimaryKeyElements();
		this.pYAnnotForeignKey = new YAnnotForeignKeyElements();
		this.pYAnnotJava = new YAnnotJavaElements();
		this.pYAnnotSwift = new YAnnotSwiftElements();
		this.pYAnnotDatabase = new YAnnotDatabaseElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pValidID = new ValidIDElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.jgen.notes.dmw.lite.mdl.Model".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//YModel:
	//	('package' name=QualifiedName ';'?)?
	//	imports+=YImport*
	//	annotations+=YAnnotation*;
	public YModelElements getYModelAccess() {
		return pYModel;
	}
	
	public ParserRule getYModelRule() {
		return getYModelAccess().getRule();
	}
	
	//YImport:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public YImportElements getYImportAccess() {
		return pYImport;
	}
	
	public ParserRule getYImportRule() {
		return getYImportAccess().getRule();
	}
	
	//YAnnotation:
	//	YAnnotEntity | YAnnotTechnicalDesign | YAnnotDatabase | YAnnotJava | YAnnotSwift;
	public YAnnotationElements getYAnnotationAccess() {
		return pYAnnotation;
	}
	
	public ParserRule getYAnnotationRule() {
		return getYAnnotationAccess().getRule();
	}
	
	///*
	// * Data model
	// */ YAnnotEntity:
	//	{YAnnotEntity}
	//	'@entity' name=ValidID (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? '{'
	//	annotations+=YAnnotEntityInner*
	//	'}';
	public YAnnotEntityElements getYAnnotEntityAccess() {
		return pYAnnotEntity;
	}
	
	public ParserRule getYAnnotEntityRule() {
		return getYAnnotEntityAccess().getRule();
	}
	
	//YAnnotAttribute:
	//	{YAnnotAttribute} '@attribute' name=ValidID optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? ';'?;
	public YAnnotAttributeElements getYAnnotAttributeAccess() {
		return pYAnnotAttribute;
	}
	
	public ParserRule getYAnnotAttributeRule() {
		return getYAnnotAttributeAccess().getRule();
	}
	
	////YAnnotDataType:
	////	'Int' | 'Short' | 'Long' | 'String' | 'Date' | 'Time' | 'Timestamp' | 'Double' | 'Bool' | 'Blob'
	////;
	//YAnnotRelationship:
	//	{YAnnotRelationship} '@relationship' name=ValidID optional?='?'? '->'
	//	target=[YAnnotEntity|QualifiedName] many?='*'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ('<-' inverse=[YAnnotRelationship|QualifiedName])? ';'?;
	public YAnnotRelationshipElements getYAnnotRelationshipAccess() {
		return pYAnnotRelationship;
	}
	
	public ParserRule getYAnnotRelationshipRule() {
		return getYAnnotRelationshipAccess().getRule();
	}
	
	//YAnnotIdInner:
	//	YAnnotAttribute | YAnnotRelationship;
	public YAnnotIdInnerElements getYAnnotIdInnerAccess() {
		return pYAnnotIdInner;
	}
	
	public ParserRule getYAnnotIdInnerRule() {
		return getYAnnotIdInnerAccess().getRule();
	}
	
	//YAnnotIdentifier:
	//	{YAnnotIdentifier} '@identifier' name=ValidID '(' annots+=[YAnnotIdInner] (',' annots+=[YAnnotIdInner])* ')' ';'?;
	public YAnnotIdentifierElements getYAnnotIdentifierAccess() {
		return pYAnnotIdentifier;
	}
	
	public ParserRule getYAnnotIdentifierRule() {
		return getYAnnotIdentifierAccess().getRule();
	}
	
	//YAnnotationElementValuePair:
	//	=> (name=ValidID '=') value=YAnnotExpression;
	public YAnnotationElementValuePairElements getYAnnotationElementValuePairAccess() {
		return pYAnnotationElementValuePair;
	}
	
	public ParserRule getYAnnotationElementValuePairRule() {
		return getYAnnotationElementValuePairAccess().getRule();
	}
	
	//YAnnotEntityInner:
	//	YAnnotAttribute | YAnnotRelationship | YAnnotIdentifier;
	public YAnnotEntityInnerElements getYAnnotEntityInnerAccess() {
		return pYAnnotEntityInner;
	}
	
	public ParserRule getYAnnotEntityInnerRule() {
		return getYAnnotEntityInnerAccess().getRule();
	}
	
	//YAnnotExpression:
	//	{YAnnotKeyword} value=ValidID | {YAnnotStringConstant} value=STRING | {YAnnotNumberConstant} value=Number |
	//	{YAnnotBoolConstant} value=('true' | 'false') | {YAnnotArray} => ('[') (elements+=YAnnotExpression (','
	//	elements+=YAnnotExpression)*)? ']';
	public YAnnotExpressionElements getYAnnotExpressionAccess() {
		return pYAnnotExpression;
	}
	
	public ParserRule getYAnnotExpressionRule() {
		return getYAnnotExpressionAccess().getRule();
	}
	
	///*
	// * Start Technical design
	// */ YAnnotTechnicalDesign:
	//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
	//	features+=YAnnotTable*
	//	'}';
	public YAnnotTechnicalDesignElements getYAnnotTechnicalDesignAccess() {
		return pYAnnotTechnicalDesign;
	}
	
	public ParserRule getYAnnotTechnicalDesignRule() {
		return getYAnnotTechnicalDesignAccess().getRule();
	}
	
	//YAnnotTable:
	//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn*
	//	primarykey=YAnnotPrimaryKey?
	//	foreignkeys+=YAnnotForeignKey*
	//	'}';
	public YAnnotTableElements getYAnnotTableAccess() {
		return pYAnnotTable;
	}
	
	public ParserRule getYAnnotTableRule() {
		return getYAnnotTableAccess().getRule();
	}
	
	//YAnnotColumn:
	//	{YAnnotColumn} '->' attrref=[YAnnotAttribute|QualifiedName]
	//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
	//	'BOOLEAN') optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? ';'?;
	public YAnnotColumnElements getYAnnotColumnAccess() {
		return pYAnnotColumn;
	}
	
	public ParserRule getYAnnotColumnRule() {
		return getYAnnotColumnAccess().getRule();
	}
	
	//YAnnotColumnLike:
	//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
	public YAnnotColumnLikeElements getYAnnotColumnLikeAccess() {
		return pYAnnotColumnLike;
	}
	
	public ParserRule getYAnnotColumnLikeRule() {
		return getYAnnotColumnLikeAccess().getRule();
	}
	
	//YAnnotAbstractColumn:
	//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
	public YAnnotAbstractColumnElements getYAnnotAbstractColumnAccess() {
		return pYAnnotAbstractColumn;
	}
	
	public ParserRule getYAnnotAbstractColumnRule() {
		return getYAnnotAbstractColumnAccess().getRule();
	}
	
	//YAnnotPrimaryKey:
	//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
	public YAnnotPrimaryKeyElements getYAnnotPrimaryKeyAccess() {
		return pYAnnotPrimaryKey;
	}
	
	public ParserRule getYAnnotPrimaryKeyRule() {
		return getYAnnotPrimaryKeyAccess().getRule();
	}
	
	//YAnnotForeignKey:
	//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRelationship|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
	//	'}' ';'?;
	public YAnnotForeignKeyElements getYAnnotForeignKeyAccess() {
		return pYAnnotForeignKey;
	}
	
	public ParserRule getYAnnotForeignKeyRule() {
		return getYAnnotForeignKeyAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotJava:
	//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotJavaElements getYAnnotJavaAccess() {
		return pYAnnotJava;
	}
	
	public ParserRule getYAnnotJavaRule() {
		return getYAnnotJavaAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotSwift:
	//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotSwiftElements getYAnnotSwiftAccess() {
		return pYAnnotSwift;
	}
	
	public ParserRule getYAnnotSwiftRule() {
		return getYAnnotSwiftAccess().getRule();
	}
	
	///*
	// * Database Generation Annotations
	// */ YAnnotDatabase:
	//	{YAnnotDatabase} '@database' name=ValidID ';'?;
	public YAnnotDatabaseElements getYAnnotDatabaseAccess() {
		return pYAnnotDatabase;
	}
	
	public ParserRule getYAnnotDatabaseRule() {
		return getYAnnotDatabaseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//Number hidden():
	//	INT ('.' INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
