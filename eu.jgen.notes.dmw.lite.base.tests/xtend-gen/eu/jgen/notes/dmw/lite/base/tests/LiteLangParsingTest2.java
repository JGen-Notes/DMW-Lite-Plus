/**
 * [The "BSD license"]
 * Copyright (c) 2016, JGen Notes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
 *    and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 *    and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package eu.jgen.notes.dmw.lite.base.tests;

import com.google.inject.Inject;
import com.google.inject.Provider;
import eu.jgen.notes.dmw.lite.base.lang.YWidget;
import eu.jgen.notes.dmw.lite.base.scoping.LangIndex;
import eu.jgen.notes.dmw.lite.base.tests.LangInjectorProvider;
import eu.jgen.notes.dmw.lite.utility.LangLib;
import eu.jgen.notes.dmw.lite.utility.LangUtil;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(LangInjectorProvider.class)
@SuppressWarnings("all")
public class LiteLangParsingTest2 {
  @Inject
  @Extension
  private ParseHelper<YWidget> parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private LangUtil _langUtil;
  
  @Inject
  @Extension
  private LangLib _langLib;
  
  @Inject
  @Extension
  private LangIndex _langIndex;
  
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void loadModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Person {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineExitStates() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class CheckExits : Widget {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public func hello() { ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.setExitState(self.exits.processStarted);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t");
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineCommands() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Commands {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var DISPLAY : Command;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var SELECT : Command;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineEntity() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@entity Person  {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineEntityWithAttributes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@entity Person {");
    _builder.newLine();
    _builder.append("@attr number : Int  @length(9);");
    _builder.newLine();
    _builder.append("@attr firstName : String @length(25);");
    _builder.newLine();
    _builder.append("@attr lastName : String @length(25);");
    _builder.newLine();
    _builder.append("@attr description : String @length(250);");
    _builder.newLine();
    _builder.append("@attr dateOfBirth : Date;");
    _builder.newLine();
    _builder.append("@attr lastEntry : Time;");
    _builder.newLine();
    _builder.append("@attr lastUpdate : Timestamp;");
    _builder.newLine();
    _builder.append("@attr age: Short;");
    _builder.newLine();
    _builder.append("@attr rate: Double @length(9);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineStructure() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@entity Person  {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class PersonView : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDefineWidget() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class CreatePerson : Widget {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testReadStatement() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package eu.jgen.notes.dmw.sample;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@entity Person {     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr nationalid : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr firstName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr lastName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr dateOfBirth : Date? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@rel livesIn -> Address <- Address.isPlaceFor ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id personid (nationalid);    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@entity Employee : Person {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr number : Short @length(4);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr jobTittle : String @length(10);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@rel employedBy -> Department <- Department.employs;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id myid (number);          ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@entity Department{     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr number : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr name : String  @length(50);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr location : String? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@rel employs -> Employee <- Employee.employedBy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id myid (number);          ");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@entity Address {      ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr town : String  @length(50);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr streetName : String? @length (30);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr number : String  @length(6);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr zipcode : String? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@rel isPlaceFor -> Person <- Person.livesIn;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id addrid (number);          ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ReadPerson : Widget { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ExpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ImpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class CurrentPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var impPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var expPerson : ExpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var currentPerson : CurrentPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("func start() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(super.isExitState(self.exits.processStarted)) {");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("read currentPerson -> Person");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("where self.currentPerson.number == self.impPerson.number");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("success {");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("super.moveStruct(self.currentPerson, self.expPerson); ");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("super.setExitState(self.exits.processCompleted);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("} not found {");
    _builder.newLine();
    _builder.append("\t\t   \t ");
    _builder.append("super.setExitState(self.exits.personNF);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testReadEachStatement() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@entity Person {     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr nationalid : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr firstName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr lastName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr dateOfBirth : Date? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id personid (nationalid);    ");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("class ReadEachPerson : Widget {  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ExpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String ?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date ?;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ImpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class CurrentPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String ?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date ?;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var impPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var expPerson : ExpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var selectedPersons : Array <expPerson>;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var currentPerson : CurrentPerson;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("func start() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (super.isExitState(self.exits.processStarted)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("read each currentPerson -> Person ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("where self.currentPerson.number > self.impPerson.number");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("target currentPerson {");
    _builder.newLine();
    _builder.append("\t\t\t   \t");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    final Consumer<Issue> _function = (Issue it) -> {
      InputOutput.<Issue>println(it);
    };
    this._validationTestHelper.validate(result).forEach(_function);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testCreateStatement() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@entity Person {     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr nationalid : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr firstName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr lastName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr dateOfBirth : Date? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id personid (nationalid);    ");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("class CreatePerson : Widget {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ImpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ExpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var impPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var expPerson : ExpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var currentPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("func start() { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(super.isExitState(self.exits.processStarted)) {");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("create currentPerson -> Person  {");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("self.currentPerson.number = 10;");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("self.currentPerson.firstName = self.impPerson.firstName;");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("self.currentPerson.lastName = self.impPerson.lastName;\t\t      \t");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("} success {");
    _builder.newLine();
    _builder.append("\t\t   \t  ");
    _builder.append("super.setExitState(self.exits.processCompleted);");
    _builder.newLine();
    _builder.append("\t\t   \t  ");
    _builder.append("self.expPerson.number = self.currentPerson.number;");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("} already  exist {");
    _builder.newLine();
    _builder.append("\t\t   \t ");
    _builder.append("super.setExitState(self.exits.personAE);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    final Consumer<Issue> _function = (Issue it) -> {
      InputOutput.<Issue>println(it);
    };
    this._validationTestHelper.validate(result).forEach(_function);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testDeleteStatement() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@entity Person {     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr nationalid : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr firstName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr lastName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr dateOfBirth : Date? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id personid (nationalid);    ");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class DeletePerson : Widget {   ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ImpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class CurrentPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var impPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var currentPerson : CurrentPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("func start() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(super.isExitState(self.exits.processStarted)) {");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("read currentPerson -> Person  ");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("where self.currentPerson.number == self.impPerson.number");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("success {");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("delete  currentPerson -> Person;\t       ");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("} not found {");
    _builder.newLine();
    _builder.append("\t\t   \t ");
    _builder.append("super.setExitState(self.exits.personNF);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  @Test
  public void testUpdateStatement() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@entity Person {     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr nationalid : Int  @length(9);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr firstName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr lastName : String  @length(25);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr description : String? @length (200);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr dateOfBirth : Date? ;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id personid (nationalid);    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processStarted : ExitState @action (normal)  @msgtype(none) @message(\"Process started.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  @action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personNF : ExitState  @action (normal)  @msgtype(none) @message(\"Person not found.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var personAE : ExitState  @action (normal)  @msgtype(none) @message(\"Person already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class UpdatePerson : Widget {  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class ImpPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class CurrentPerson : Structure -> Person {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var number : Int;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var firstName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var lastName : String;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var description : String?;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var dateOfBirth : Date?;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var impPerson : ImpPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var currentPerson : CurrentPerson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("func start() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(super.isExitState(self.exits.processStarted)) {");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("read currentPerson -> Person");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("where self.currentPerson.number == self.impPerson.number");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("success {");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("update  currentPerson -> Person {");
    _builder.newLine();
    _builder.append("\t\t       \t  ");
    _builder.append("self.currentPerson.description = self.impPerson.description;");
    _builder.newLine();
    _builder.append("\t\t       \t  ");
    _builder.append("self.currentPerson.dateOfBirth = self.impPerson.dateOfBirth;");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("} success {");
    _builder.newLine();
    _builder.append("\t\t       \t  ");
    _builder.append("super.setExitState(self.exits.processCompleted);");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("}\t\t       ");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("} not found {");
    _builder.newLine();
    _builder.append("\t\t   \t ");
    _builder.append("super.setExitState(self.exits.personNF);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    final String text = _builder.toString();
    final YWidget result = this.loadLibAndParse(text);
    final Consumer<Issue> _function = (Issue it) -> {
      InputOutput.<Issue>println(it);
    };
    this._validationTestHelper.validate(result).forEach(_function);
    this._validationTestHelper.assertNoErrors(result);
  }
  
  private YWidget loadLibAndParse(final CharSequence p) {
    try {
      YWidget _xblockexpression = null;
      {
        final ResourceSet resourceSet = this.rsp.get();
        this._langLib.loadLib(resourceSet);
        _xblockexpression = this.parseHelper.parse(p, resourceSet);
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
