/*
 * generated by Xtext 2.21.0
 */
package eu.jgen.notes.dmw.lite.base.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import eu.jgen.notes.dmw.lite.mdl.services.ModelGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class YWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsYImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsYEnumerationParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Assignment cClassesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassesYClassParserRuleCall_5_0 = (RuleCall)cClassesAssignment_5.eContents().get(0);
		
		//YWidget:
		//	'package' name=QualifiedName ';'?
		//	imports+=YImport*
		//	enums+=YEnumeration*
		//	classes+=YClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName ';'? imports+=YImport* enums+=YEnumeration* classes+=YClass*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=YImport*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//YImport
		public RuleCall getImportsYImportParserRuleCall_3_0() { return cImportsYImportParserRuleCall_3_0; }
		
		//enums+=YEnumeration*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }
		
		//YEnumeration
		public RuleCall getEnumsYEnumerationParserRuleCall_4_0() { return cEnumsYEnumerationParserRuleCall_4_0; }
		
		//classes+=YClass*
		public Assignment getClassesAssignment_5() { return cClassesAssignment_5; }
		
		//YClass
		public RuleCall getClassesYClassParserRuleCall_5_0() { return cClassesYClassParserRuleCall_5_0; }
	}
	public class YParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYTypedDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYJoinDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YParameter:
		//	YTypedDeclaration | YJoinDef;
		@Override public ParserRule getRule() { return rule; }
		
		//YTypedDeclaration | YJoinDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall_0() { return cYTypedDeclarationParserRuleCall_0; }
		
		//YJoinDef
		public RuleCall getYJoinDefParserRuleCall_1() { return cYJoinDefParserRuleCall_1; }
	}
	public class YArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueYArgumentValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//YArgument:
		//	name=ValidID ':' value=YArgumentValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' value=YArgumentValue
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=YArgumentValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//YArgumentValue
		public RuleCall getValueYArgumentValueParserRuleCall_2_0() { return cValueYArgumentValueParserRuleCall_2_0; }
	}
	public class YArgumentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YArgumentValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YArgumentValue:
		//	INT | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class YEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassYEnumerationCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassYEnumerationQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassYEnumerationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesYEnumerationCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YEnumeration:
		//	{YEnumeration} 'enum' name=ValidID (':' superclass=[YEnumeration|QualifiedName])? '{'
		//	cases+=YEnumerationCase*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YEnumeration} 'enum' name=ValidID (':' superclass=[YEnumeration|QualifiedName])? '{' cases+=YEnumerationCase* '}'
		public Group getGroup() { return cGroup; }
		
		//{YEnumeration}
		public Action getYEnumerationAction_0() { return cYEnumerationAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(':' superclass=[YEnumeration|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//superclass=[YEnumeration|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }
		
		//[YEnumeration|QualifiedName]
		public CrossReference getSuperclassYEnumerationCrossReference_3_1_0() { return cSuperclassYEnumerationCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperclassYEnumerationQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassYEnumerationQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//cases+=YEnumerationCase*
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }
		
		//YEnumerationCase
		public RuleCall getCasesYEnumerationCaseParserRuleCall_5_0() { return cCasesYEnumerationCaseParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YEnumerationCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YEnumerationCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYEnumerationCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsYParameterParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsYParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//YEnumerationCase:
		//	{YEnumerationCase}
		//	'case' name=ValidID ('(' (params+=YParameter (',' params+=YParameter)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YEnumerationCase} 'case' name=ValidID ('(' (params+=YParameter (',' params+=YParameter)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//{YEnumerationCase}
		public Action getYEnumerationCaseAction_0() { return cYEnumerationCaseAction_0; }
		
		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//('(' (params+=YParameter (',' params+=YParameter)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(params+=YParameter (',' params+=YParameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_3_1_0_0() { return cParamsYParameterParserRuleCall_3_1_0_0; }
		
		//(',' params+=YParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_3_1_1_1_0() { return cParamsYParameterParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class YClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassYClassCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassYClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassYClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntityRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEntityRefYAnnotEntityCrossReference_4_1_0 = (CrossReference)cEntityRefAssignment_4_1.eContents().get(0);
		private final RuleCall cEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cEntityRefYAnnotEntityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInnersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInnersYClassParserRuleCall_6_0 = (RuleCall)cInnersAssignment_6.eContents().get(0);
		private final Assignment cMembersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMembersYMemberParserRuleCall_7_0 = (RuleCall)cMembersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//YClass:
		//	{YClass} 'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('=>'
		//	entityRef=[model::YAnnotEntity|QualifiedName])?
		//	'{'
		//	inners+=YClass*
		//	members+=YMember*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YClass} 'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('=>'
		//entityRef=[model::YAnnotEntity|QualifiedName])? '{' inners+=YClass* members+=YMember* '}'
		public Group getGroup() { return cGroup; }
		
		//{YClass}
		public Action getYClassAction_0() { return cYClassAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(':' superclass=[YClass|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//superclass=[YClass|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }
		
		//[YClass|QualifiedName]
		public CrossReference getSuperclassYClassCrossReference_3_1_0() { return cSuperclassYClassCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperclassYClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassYClassQualifiedNameParserRuleCall_3_1_0_1; }
		
		//('=>' entityRef=[model::YAnnotEntity|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4_0() { return cEqualsSignGreaterThanSignKeyword_4_0; }
		
		//entityRef=[model::YAnnotEntity|QualifiedName]
		public Assignment getEntityRefAssignment_4_1() { return cEntityRefAssignment_4_1; }
		
		//[model::YAnnotEntity|QualifiedName]
		public CrossReference getEntityRefYAnnotEntityCrossReference_4_1_0() { return cEntityRefYAnnotEntityCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1() { return cEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//inners+=YClass*
		public Assignment getInnersAssignment_6() { return cInnersAssignment_6; }
		
		//YClass
		public RuleCall getInnersYClassParserRuleCall_6_0() { return cInnersYClassParserRuleCall_6_0; }
		
		//members+=YMember*
		public Assignment getMembersAssignment_7() { return cMembersAssignment_7; }
		
		//YMember
		public RuleCall getMembersYMemberParserRuleCall_7_0() { return cMembersYMemberParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class YMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YMember:
		//	YProperty | YFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//YProperty | YFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YProperty
		public RuleCall getYPropertyParserRuleCall_0() { return cYPropertyParserRuleCall_0; }
		
		//YFunction
		public RuleCall getYFunctionParserRuleCall_1() { return cYFunctionParserRuleCall_1; }
	}
	public class YTypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YTypedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeYClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeYClassCrossReference_2_0.eContents().get(1);
		
		//fragment YTypedDeclaration *:
		//	name=ValidID ':' type=[YClass|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=[YClass|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[YClass|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_2_0() { return cTypeYClassCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_2_0_1() { return cTypeYClassQualifiedNameParserRuleCall_2_0_1; }
	}
	public class YPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cYTypedDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTuplesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTuplesYTuplesParserRuleCall_3_0 = (RuleCall)cTuplesAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalQuestionMarkKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttrRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAttrRefYAnnotAttributeCrossReference_5_1_0 = (CrossReference)cAttrRefAssignment_5_1.eContents().get(0);
		private final RuleCall cAttrRefYAnnotAttributeQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cAttrRefYAnnotAttributeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YProperty:
		//	access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('=>'
		//	attrRef=[model::YAnnotAttribute|QualifiedName])?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('=>'
		//attrRef=[model::YAnnotAttribute|QualifiedName])? ';'
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall_2() { return cYTypedDeclarationParserRuleCall_2; }
		
		//tuples=YTuples?
		public Assignment getTuplesAssignment_3() { return cTuplesAssignment_3; }
		
		//YTuples
		public RuleCall getTuplesYTuplesParserRuleCall_3_0() { return cTuplesYTuplesParserRuleCall_3_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_4_0() { return cOptionalQuestionMarkKeyword_4_0; }
		
		//('=>' attrRef=[model::YAnnotAttribute|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5_0() { return cEqualsSignGreaterThanSignKeyword_5_0; }
		
		//attrRef=[model::YAnnotAttribute|QualifiedName]
		public Assignment getAttrRefAssignment_5_1() { return cAttrRefAssignment_5_1; }
		
		//[model::YAnnotAttribute|QualifiedName]
		public CrossReference getAttrRefYAnnotAttributeCrossReference_5_1_0() { return cAttrRefYAnnotAttributeCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getAttrRefYAnnotAttributeQualifiedNameParserRuleCall_5_1_0_1() { return cAttrRefYAnnotAttributeQualifiedNameParserRuleCall_5_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class YTuplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YTuples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYTuplesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIncludesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cIncludesYPropertyCrossReference_2_0_0 = (CrossReference)cIncludesAssignment_2_0.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIncludesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIncludesYPropertyCrossReference_2_1_1_0 = (CrossReference)cIncludesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YTuples:
		//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>'
		public Group getGroup() { return cGroup; }
		
		//{YTuples}
		public Action getYTuplesAction_0() { return cYTuplesAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//(includes+=[YProperty] (',' includes+=[YProperty])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_0() { return cIncludesAssignment_2_0; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_0_0() { return cIncludesYPropertyCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_0_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_0_0_1; }
		
		//(',' includes+=[YProperty])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_1_1() { return cIncludesAssignment_2_1_1; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_1_1_0() { return cIncludesYPropertyCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class YFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cFuncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsYParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsYParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThrowAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cThrowThrowsKeyword_6_0 = (Keyword)cThrowAssignment_6.eContents().get(0);
		private final Assignment cReturnvalueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cReturnvalueHyphenMinusGreaterThanSignKeyword_7_0 = (Keyword)cReturnvalueAssignment_7.eContents().get(0);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTypeYClassCrossReference_8_0 = (CrossReference)cTypeAssignment_8.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_8_0_1 = (RuleCall)cTypeYClassCrossReference_8_0.eContents().get(1);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyYBlockParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		
		//YFunction:
		//	access=YAccessLevel? 'func' name=ValidID
		//	'(' (params+=YParameter (',' params+=YParameter)*)? ')' throw?='throws' returnvalue?='->'?
		//	type=[YClass|QualifiedName]?
		//	body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'func' name=ValidID '(' (params+=YParameter (',' params+=YParameter)*)? ')' throw?='throws'
		//returnvalue?='->'? type=[YClass|QualifiedName]? body=YBlock
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'func'
		public Keyword getFuncKeyword_1() { return cFuncKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=YParameter (',' params+=YParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_4_0_0() { return cParamsYParameterParserRuleCall_4_0_0; }
		
		//(',' params+=YParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_4_1_1_0() { return cParamsYParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//throw?='throws'
		public Assignment getThrowAssignment_6() { return cThrowAssignment_6; }
		
		//'throws'
		public Keyword getThrowThrowsKeyword_6_0() { return cThrowThrowsKeyword_6_0; }
		
		//returnvalue?='->'?
		public Assignment getReturnvalueAssignment_7() { return cReturnvalueAssignment_7; }
		
		//'->'
		public Keyword getReturnvalueHyphenMinusGreaterThanSignKeyword_7_0() { return cReturnvalueHyphenMinusGreaterThanSignKeyword_7_0; }
		
		//type=[YClass|QualifiedName]?
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_8_0() { return cTypeYClassCrossReference_8_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_8_0_1() { return cTypeYClassQualifiedNameParserRuleCall_8_0_1; }
		
		//body=YBlock
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_9_0() { return cBodyYBlockParserRuleCall_9_0; }
	}
	public class YBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsYStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YBlock:
		//	{YBlock} '{' statements+=YStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YBlock} '{' statements+=YStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{YBlock}
		public Action getYBlockAction_0() { return cYBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=YStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//YStatement
		public RuleCall getStatementsYStatementParserRuleCall_2_0() { return cStatementsYStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class YStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYReadStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYCreateStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYUpdateStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cYAssociateStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cYDisassociateStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cYDeleteStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cYReadEachStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cYWhileStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cYRepeatWhileStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cYForInStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cYExpressionParserRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final RuleCall cYIfStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cYThrowParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cYDoStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cYSwitchStatementParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//YStatement:
		//	YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
		//	YDisassociateStatement | YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement |
		//	YForInStatement | YExpression ';'? | YIfStatement | YThrow | YDoStatement | YSwitchStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
		//YDisassociateStatement | YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement |
		//YForInStatement | YExpression ';'? | YIfStatement | YThrow | YDoStatement | YSwitchStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YVariableDeclaration
		public RuleCall getYVariableDeclarationParserRuleCall_0() { return cYVariableDeclarationParserRuleCall_0; }
		
		//YReturn
		public RuleCall getYReturnParserRuleCall_1() { return cYReturnParserRuleCall_1; }
		
		//YReadStatement
		public RuleCall getYReadStatementParserRuleCall_2() { return cYReadStatementParserRuleCall_2; }
		
		//YCreateStatement
		public RuleCall getYCreateStatementParserRuleCall_3() { return cYCreateStatementParserRuleCall_3; }
		
		//YUpdateStatement
		public RuleCall getYUpdateStatementParserRuleCall_4() { return cYUpdateStatementParserRuleCall_4; }
		
		//YAssociateStatement
		public RuleCall getYAssociateStatementParserRuleCall_5() { return cYAssociateStatementParserRuleCall_5; }
		
		//YDisassociateStatement
		public RuleCall getYDisassociateStatementParserRuleCall_6() { return cYDisassociateStatementParserRuleCall_6; }
		
		//YDeleteStatement
		public RuleCall getYDeleteStatementParserRuleCall_7() { return cYDeleteStatementParserRuleCall_7; }
		
		//YReadEachStatement
		public RuleCall getYReadEachStatementParserRuleCall_8() { return cYReadEachStatementParserRuleCall_8; }
		
		//YWhileStatement
		public RuleCall getYWhileStatementParserRuleCall_9() { return cYWhileStatementParserRuleCall_9; }
		
		//YRepeatWhileStatement
		public RuleCall getYRepeatWhileStatementParserRuleCall_10() { return cYRepeatWhileStatementParserRuleCall_10; }
		
		//YForInStatement
		public RuleCall getYForInStatementParserRuleCall_11() { return cYForInStatementParserRuleCall_11; }
		
		//YExpression ';'?
		public Group getGroup_12() { return cGroup_12; }
		
		//YExpression
		public RuleCall getYExpressionParserRuleCall_12_0() { return cYExpressionParserRuleCall_12_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }
		
		//YIfStatement
		public RuleCall getYIfStatementParserRuleCall_13() { return cYIfStatementParserRuleCall_13; }
		
		//YThrow
		public RuleCall getYThrowParserRuleCall_14() { return cYThrowParserRuleCall_14; }
		
		//YDoStatement
		public RuleCall getYDoStatementParserRuleCall_15() { return cYDoStatementParserRuleCall_15; }
		
		//YSwitchStatement
		public RuleCall getYSwitchStatementParserRuleCall_16() { return cYSwitchStatementParserRuleCall_16; }
	}
	public class YDoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YDoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYDoStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockYBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Assignment cCatchesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCatchesYCatchParserRuleCall_3_0 = (RuleCall)cCatchesAssignment_3.eContents().get(0);
		
		//YDoStatement:
		//	{YDoStatement} 'do'
		//	block=YBlock
		//	catches+=YCatch*;
		@Override public ParserRule getRule() { return rule; }
		
		//{YDoStatement} 'do' block=YBlock catches+=YCatch*
		public Group getGroup() { return cGroup; }
		
		//{YDoStatement}
		public Action getYDoStatementAction_0() { return cYDoStatementAction_0; }
		
		//'do'
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }
		
		//block=YBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//YBlock
		public RuleCall getBlockYBlockParserRuleCall_2_0() { return cBlockYBlockParserRuleCall_2_0; }
		
		//catches+=YCatch*
		public Assignment getCatchesAssignment_3() { return cCatchesAssignment_3; }
		
		//YCatch
		public RuleCall getCatchesYCatchParserRuleCall_3_0() { return cCatchesYCatchParserRuleCall_3_0; }
	}
	public class YCatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YCatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYCatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExceptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExceptionYEnumerationCaseCrossReference_2_0 = (CrossReference)cExceptionAssignment_2.eContents().get(0);
		private final RuleCall cExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExceptionYEnumerationCaseCrossReference_2_0.eContents().get(1);
		private final Assignment cCatchBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCatchBlockYCatchBlockParserRuleCall_3_0 = (RuleCall)cCatchBlockAssignment_3.eContents().get(0);
		
		//YCatch:
		//	{YCatch} 'catch' exception=[YEnumerationCase|QualifiedName] catchBlock=YCatchBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{YCatch} 'catch' exception=[YEnumerationCase|QualifiedName] catchBlock=YCatchBlock
		public Group getGroup() { return cGroup; }
		
		//{YCatch}
		public Action getYCatchAction_0() { return cYCatchAction_0; }
		
		//'catch'
		public Keyword getCatchKeyword_1() { return cCatchKeyword_1; }
		
		//exception=[YEnumerationCase|QualifiedName]
		public Assignment getExceptionAssignment_2() { return cExceptionAssignment_2; }
		
		//[YEnumerationCase|QualifiedName]
		public CrossReference getExceptionYEnumerationCaseCrossReference_2_0() { return cExceptionYEnumerationCaseCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1() { return cExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1; }
		
		//catchBlock=YCatchBlock
		public Assignment getCatchBlockAssignment_3() { return cCatchBlockAssignment_3; }
		
		//YCatchBlock
		public RuleCall getCatchBlockYCatchBlockParserRuleCall_3_0() { return cCatchBlockYCatchBlockParserRuleCall_3_0; }
	}
	public class YCatchBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YCatchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYCatchBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsYStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YCatchBlock:
		//	{YCatchBlock} '{' statements+=YStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YCatchBlock} '{' statements+=YStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{YCatchBlock}
		public Action getYCatchBlockAction_0() { return cYCatchBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=YStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//YStatement
		public RuleCall getStatementsYStatementParserRuleCall_2_0() { return cStatementsYStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class YVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYTypedDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YVariableDeclaration:
		//	YTypedDeclaration '=' expression=YOrExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//YTypedDeclaration '=' expression=YOrExpression ';'
		public Group getGroup() { return cGroup; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall_0() { return cYTypedDeclarationParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YThrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YThrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYThrowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExceptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExceptionYEnumerationCaseCrossReference_2_0 = (CrossReference)cExceptionAssignment_2.eContents().get(0);
		private final RuleCall cExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExceptionYEnumerationCaseCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YThrow:
		//	{YThrow} 'throw' exception=[YEnumerationCase|QualifiedName]
		//	'(' (arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		//	';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YThrow} 'throw' exception=[YEnumerationCase|QualifiedName] '(' (arguments+=YOrExpression (','
		//arguments+=YOrExpression)*)? ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YThrow}
		public Action getYThrowAction_0() { return cYThrowAction_0; }
		
		//'throw'
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }
		
		//exception=[YEnumerationCase|QualifiedName]
		public Assignment getExceptionAssignment_2() { return cExceptionAssignment_2; }
		
		//[YEnumerationCase|QualifiedName]
		public CrossReference getExceptionYEnumerationCaseCrossReference_2_0() { return cExceptionYEnumerationCaseCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1() { return cExceptionYEnumerationCaseQualifiedNameParserRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(arguments+=YOrExpression (',' arguments+=YOrExpression)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_4_0_0() { return cArgumentsYOrExpressionParserRuleCall_4_0_0; }
		
		//(',' arguments+=YOrExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_4_1_1_0() { return cArgumentsYOrExpressionParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class YReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YReturn:
		//	{YReturn} 'return' expression=YOrExpression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{YReturn} 'return' expression=YOrExpression? ';'
		public Group getGroup() { return cGroup; }
		
		//{YReturn}
		public Action getYReturnAction_0() { return cYReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=YOrExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockYBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockYBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//YIfStatement:
		//	'if' '(' expression=YOrExpression ')' thenBlock=YBlock (=> 'else' elseBlock=YBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=YOrExpression ')' thenBlock=YBlock (=> 'else' elseBlock=YBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=YBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//YBlock
		public RuleCall getThenBlockYBlockParserRuleCall_4_0() { return cThenBlockYBlockParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=YBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=YBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//YBlock
		public RuleCall getElseBlockYBlockParserRuleCall_5_1_0() { return cElseBlockYBlockParserRuleCall_5_1_0; }
	}
	public class YSwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YSwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchExpressionYExpressionParserRuleCall_2_0 = (RuleCall)cSwitchExpressionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesYSwitchCaseParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultYBlockParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YSwitchStatement:
		//	{YSwitchStatement}
		//	'switch' switchExpression=YExpression '{'
		//	cases+=YSwitchCase* ('default' ':' default=YBlock)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YSwitchStatement} 'switch' switchExpression=YExpression '{' cases+=YSwitchCase* ('default' ':' default=YBlock)? '}'
		public Group getGroup() { return cGroup; }
		
		//{YSwitchStatement}
		public Action getYSwitchStatementAction_0() { return cYSwitchStatementAction_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }
		
		//switchExpression=YExpression
		public Assignment getSwitchExpressionAssignment_2() { return cSwitchExpressionAssignment_2; }
		
		//YExpression
		public RuleCall getSwitchExpressionYExpressionParserRuleCall_2_0() { return cSwitchExpressionYExpressionParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//cases+=YSwitchCase*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }
		
		//YSwitchCase
		public RuleCall getCasesYSwitchCaseParserRuleCall_4_0() { return cCasesYSwitchCaseParserRuleCall_4_0; }
		
		//('default' ':' default=YBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'default'
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//default=YBlock
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }
		
		//YBlock
		public RuleCall getDefaultYBlockParserRuleCall_5_2_0() { return cDefaultYBlockParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YSwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYSwitchCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCaseExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaseExpressionYExpressionParserRuleCall_1_1_0 = (RuleCall)cCaseExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenYBlockParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//YSwitchCase:
		//	{YSwitchCase} ('case' caseExpression=YExpression)?
		//	':' then=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{YSwitchCase} ('case' caseExpression=YExpression)? ':' then=YBlock
		public Group getGroup() { return cGroup; }
		
		//{YSwitchCase}
		public Action getYSwitchCaseAction_0() { return cYSwitchCaseAction_0; }
		
		//('case' caseExpression=YExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//caseExpression=YExpression
		public Assignment getCaseExpressionAssignment_1_1() { return cCaseExpressionAssignment_1_1; }
		
		//YExpression
		public RuleCall getCaseExpressionYExpressionParserRuleCall_1_1_0() { return cCaseExpressionYExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//then=YBlock
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//YBlock
		public RuleCall getThenYBlockParserRuleCall_3_0() { return cThenYBlockParserRuleCall_3_0; }
	}
	public class YSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YSymbol:
		//	YVariableDeclaration | YParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//YVariableDeclaration | YParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YVariableDeclaration
		public RuleCall getYVariableDeclarationParserRuleCall_0() { return cYVariableDeclarationParserRuleCall_0; }
		
		//YParameter
		public RuleCall getYParameterParserRuleCall_1() { return cYParameterParserRuleCall_1; }
	}
	public class YNamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YNamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYSymbolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YNamedElement:
		//	YClass | YMember | YSymbol;
		@Override public ParserRule getRule() { return rule; }
		
		//YClass | YMember | YSymbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YClass
		public RuleCall getYClassParserRuleCall_0() { return cYClassParserRuleCall_0; }
		
		//YMember
		public RuleCall getYMemberParserRuleCall_1() { return cYMemberParserRuleCall_1; }
		
		//YSymbol
		public RuleCall getYSymbolParserRuleCall_2() { return cYSymbolParserRuleCall_2; }
	}
	public class YExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YExpression");
		private final RuleCall cYAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//YExpression:
		//	YAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//YAssignment
		public RuleCall getYAssignmentParserRuleCall() { return cYAssignmentParserRuleCall; }
	}
	public class YAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YAssignment YExpression:
		//	YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//YSelectionExpression
		public RuleCall getYSelectionExpressionParserRuleCall_0() { return cYSelectionExpressionParserRuleCall_0; }
		
		//({YAssignment.left=current} '=' right=YOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{YAssignment.left=current}
		public Action getYAssignmentLeftAction_1_0() { return cYAssignmentLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=YOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YOrExpression
		public RuleCall getRightYOrExpressionParserRuleCall_1_2_0() { return cRightYOrExpressionParserRuleCall_1_2_0; }
	}
	public class YSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberYMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberYMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberYMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cFunctioninvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cFunctioninvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cFunctioninvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsYOrExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsYOrExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//YSelectionExpression YExpression:
		//	YTerminalExpression ({YMemberSelection.receiver=current} '.'
		//	member=[YMember] (functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YTerminalExpression ({YMemberSelection.receiver=current} '.' member=[YMember] (functioninvocation?='('
		//(args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//YTerminalExpression
		public RuleCall getYTerminalExpressionParserRuleCall_0() { return cYTerminalExpressionParserRuleCall_0; }
		
		//({YMemberSelection.receiver=current} '.' member=[YMember] (functioninvocation?='(' (args+=YOrExpression (','
		//args+=YOrExpression)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YMemberSelection.receiver=current}
		public Action getYMemberSelectionReceiverAction_1_0() { return cYMemberSelectionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//member=[YMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }
		
		//[YMember]
		public CrossReference getMemberYMemberCrossReference_1_2_0() { return cMemberYMemberCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMemberYMemberIDTerminalRuleCall_1_2_0_1() { return cMemberYMemberIDTerminalRuleCall_1_2_0_1; }
		
		//(functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//functioninvocation?='('
		public Assignment getFunctioninvocationAssignment_1_3_0() { return cFunctioninvocationAssignment_1_3_0; }
		
		//'('
		public Keyword getFunctioninvocationLeftParenthesisKeyword_1_3_0_0() { return cFunctioninvocationLeftParenthesisKeyword_1_3_0_0; }
		
		//(args+=YOrExpression (',' args+=YOrExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//args+=YOrExpression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }
		
		//YOrExpression
		public RuleCall getArgsYOrExpressionParserRuleCall_1_3_1_0_0() { return cArgsYOrExpressionParserRuleCall_1_3_1_0_0; }
		
		//(',' args+=YOrExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }
		
		//args+=YOrExpression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }
		
		//YOrExpression
		public RuleCall getArgsYOrExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsYOrExpressionParserRuleCall_1_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}
	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		///*
		// * Expressions
		// */ OpSingleAssign:
		//	'=';
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class YOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YOrExpression YExpression:
		//	YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//YAndExpression
		public RuleCall getYAndExpressionParserRuleCall_0() { return cYAndExpressionParserRuleCall_0; }
		
		//({YOrExpression.left=current} OpOr right=YAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YOrExpression.left=current}
		public Action getYOrExpressionLeftAction_1_0() { return cYOrExpressionLeftAction_1_0; }
		
		//OpOr
		public RuleCall getOpOrParserRuleCall_1_1() { return cOpOrParserRuleCall_1_1; }
		
		//right=YAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YAndExpression
		public RuleCall getRightYAndExpressionParserRuleCall_1_2_0() { return cRightYAndExpressionParserRuleCall_1_2_0; }
	}
	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class YAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YAndExpression YExpression:
		//	YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//YEqualityExpression
		public RuleCall getYEqualityExpressionParserRuleCall_0() { return cYEqualityExpressionParserRuleCall_0; }
		
		//({YAndExpression.left=current} OpAnd right=YEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YAndExpression.left=current}
		public Action getYAndExpressionLeftAction_1_0() { return cYAndExpressionLeftAction_1_0; }
		
		//OpAnd
		public RuleCall getOpAndParserRuleCall_1_1() { return cOpAndParserRuleCall_1_1; }
		
		//right=YEqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YEqualityExpression
		public RuleCall getRightYEqualityExpressionParserRuleCall_1_2_0() { return cRightYEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class YEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YEqualityExpression YExpression:
		//	YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//YComparisonExpression
		public RuleCall getYComparisonExpressionParserRuleCall_0() { return cYComparisonExpressionParserRuleCall_0; }
		
		//({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YEqualityExpression.left=current}
		public Action getYEqualityExpressionLeftAction_1_0() { return cYEqualityExpressionLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=YComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YComparisonExpression
		public RuleCall getRightYComparisonExpressionParserRuleCall_1_2_0() { return cRightYComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class YComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpCompareParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YComparisonExpression YExpression:
		//	YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//YAdditiveExpression
		public RuleCall getYAdditiveExpressionParserRuleCall_0() { return cYAdditiveExpressionParserRuleCall_0; }
		
		//({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YComparisonExpression.left=current}
		public Action getYComparisonExpressionLeftAction_1_0() { return cYComparisonExpressionLeftAction_1_0; }
		
		//op=OpCompare
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OpCompare
		public RuleCall getOpOpCompareParserRuleCall_1_1_0() { return cOpOpCompareParserRuleCall_1_1_0; }
		
		//right=YAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YAdditiveExpression
		public RuleCall getRightYAdditiveExpressionParserRuleCall_1_2_0() { return cRightYAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	'>=' | '<=' | '>' | '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<=' | '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}
	public class YAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cYPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cYMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightYMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//YAdditiveExpression YExpression:
		//	YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//YMultiplicativeExpression
		public RuleCall getYMultiplicativeExpressionParserRuleCall_0() { return cYMultiplicativeExpressionParserRuleCall_0; }
		
		//(({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({YPlus.left=current} '+' | {YMinus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{YPlus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{YPlus.left=current}
		public Action getYPlusLeftAction_1_0_0_0() { return cYPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{YMinus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{YMinus.left=current}
		public Action getYMinusLeftAction_1_0_1_0() { return cYMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=YMultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//YMultiplicativeExpression
		public RuleCall getRightYMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightYMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class YMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YMultiplicativeExpression YExpression:
		//	YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*
		public Group getGroup() { return cGroup; }
		
		//YPrimary
		public RuleCall getYPrimaryParserRuleCall_0() { return cYPrimaryParserRuleCall_0; }
		
		//({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YMulOrDiv.left=current}
		public Action getYMulOrDivLeftAction_1_0() { return cYMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=YPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YPrimary
		public RuleCall getRightYPrimaryParserRuleCall_1_2_0() { return cRightYPrimaryParserRuleCall_1_2_0; }
	}
	public class YPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYParentiesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAYOrExpressionParserRuleCall_0_2_0 = (RuleCall)cAAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cYNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionYPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cYSelectionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YPrimary YExpression:
		//	{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{YParenties} '(' a=YOrExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{YParenties}
		public Action getYParentiesAction_0_0() { return cYParentiesAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//a=YOrExpression
		public Assignment getAAssignment_0_2() { return cAAssignment_0_2; }
		
		//YOrExpression
		public RuleCall getAYOrExpressionParserRuleCall_0_2_0() { return cAYOrExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{YNot} "!" expression=YPrimary
		public Group getGroup_1() { return cGroup_1; }
		
		//{YNot}
		public Action getYNotAction_1_0() { return cYNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=YPrimary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//YPrimary
		public RuleCall getExpressionYPrimaryParserRuleCall_1_2_0() { return cExpressionYPrimaryParserRuleCall_1_2_0; }
		
		//YSelectionExpression
		public RuleCall getYSelectionExpressionParserRuleCall_2() { return cYSelectionExpressionParserRuleCall_2; }
	}
	public class YTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cYIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cYBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cYSelfAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSelfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cYSuperAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSuperKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cYNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cYSymbolRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSymbolAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSymbolYSymbolCrossReference_6_1_0 = (CrossReference)cSymbolAssignment_6_1.eContents().get(0);
		private final RuleCall cSymbolYSymbolIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSymbolYSymbolCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cYNewAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeYClassCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cTypeYClassCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Assignment cArgumentsAssignment_7_4_0 = (Assignment)cGroup_7_4.eContents().get(0);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_7_4_0_0 = (RuleCall)cArgumentsAssignment_7_4_0.eContents().get(0);
		private final Group cGroup_7_4_1 = (Group)cGroup_7_4.eContents().get(1);
		private final Keyword cCommaKeyword_7_4_1_0 = (Keyword)cGroup_7_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_7_4_1_1 = (Assignment)cGroup_7_4_1.eContents().get(1);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_7_4_1_1_0 = (RuleCall)cArgumentsAssignment_7_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		
		//YTerminalExpression YExpression:
		//	{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self'
		//	| {YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
		//	(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		//	//|	'(' YOrExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self' |
		//{YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
		//(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{YStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{YStringConstant}
		public Action getYStringConstantAction_0_0() { return cYStringConstantAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{YIntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{YIntConstant}
		public Action getYIntConstantAction_1_0() { return cYIntConstantAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{YBoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{YBoolConstant}
		public Action getYBoolConstantAction_2_0() { return cYBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{YSelf} 'self'
		public Group getGroup_3() { return cGroup_3; }
		
		//{YSelf}
		public Action getYSelfAction_3_0() { return cYSelfAction_3_0; }
		
		//'self'
		public Keyword getSelfKeyword_3_1() { return cSelfKeyword_3_1; }
		
		//{YSuper} 'super'
		public Group getGroup_4() { return cGroup_4; }
		
		//{YSuper}
		public Action getYSuperAction_4_0() { return cYSuperAction_4_0; }
		
		//'super'
		public Keyword getSuperKeyword_4_1() { return cSuperKeyword_4_1; }
		
		//{YNull} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{YNull}
		public Action getYNullAction_5_0() { return cYNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
		
		//{YSymbolRef} symbol=[YSymbol]
		public Group getGroup_6() { return cGroup_6; }
		
		//{YSymbolRef}
		public Action getYSymbolRefAction_6_0() { return cYSymbolRefAction_6_0; }
		
		//symbol=[YSymbol]
		public Assignment getSymbolAssignment_6_1() { return cSymbolAssignment_6_1; }
		
		//[YSymbol]
		public CrossReference getSymbolYSymbolCrossReference_6_1_0() { return cSymbolYSymbolCrossReference_6_1_0; }
		
		//ID
		public RuleCall getSymbolYSymbolIDTerminalRuleCall_6_1_0_1() { return cSymbolYSymbolIDTerminalRuleCall_6_1_0_1; }
		
		//{YNew} 'new' type=[YClass|QualifiedName] '(' (arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{YNew}
		public Action getYNewAction_7_0() { return cYNewAction_7_0; }
		
		//'new'
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }
		
		//type=[YClass|QualifiedName]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_7_2_0() { return cTypeYClassCrossReference_7_2_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_7_2_0_1() { return cTypeYClassQualifiedNameParserRuleCall_7_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }
		
		//(arguments+=YOrExpression (',' arguments+=YOrExpression)*)?
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_7_4_0() { return cArgumentsAssignment_7_4_0; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_7_4_0_0() { return cArgumentsYOrExpressionParserRuleCall_7_4_0_0; }
		
		//(',' arguments+=YOrExpression)*
		public Group getGroup_7_4_1() { return cGroup_7_4_1; }
		
		//','
		public Keyword getCommaKeyword_7_4_1_0() { return cCommaKeyword_7_4_1_0; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_7_4_1_1() { return cArgumentsAssignment_7_4_1_1; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_7_4_1_1_0() { return cArgumentsYOrExpressionParserRuleCall_7_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
	}
	public class YReadStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YReadStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinclauseYJoinParserRuleCall_3_0 = (RuleCall)cJoinclauseAssignment_3.eContents().get(0);
		private final Assignment cWhereclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereclauseYWhereParserRuleCall_4_0 = (RuleCall)cWhereclauseAssignment_4.eContents().get(0);
		
		//YReadStatement:
		//	'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?;
		@Override public ParserRule getRule() { return rule; }
		
		//'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
		public Group getGroup() { return cGroup; }
		
		//'db-read'
		public Keyword getDbReadKeyword_0() { return cDbReadKeyword_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_1() { return cStructsAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_1_0() { return cStructsYStructRefPairParserRuleCall_1_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_1_0() { return cStructsYStructRefPairParserRuleCall_2_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_3() { return cJoinclauseAssignment_3; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_3_0() { return cJoinclauseYJoinParserRuleCall_3_0; }
		
		//whereclause=YWhere?
		public Assignment getWhereclauseAssignment_4() { return cWhereclauseAssignment_4; }
		
		//YWhere
		public RuleCall getWhereclauseYWhereParserRuleCall_4_0() { return cWhereclauseYWhereParserRuleCall_4_0; }
	}
	public class YReadEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YReadEachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbReadEachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinclauseYJoinParserRuleCall_3_0 = (RuleCall)cJoinclauseAssignment_3.eContents().get(0);
		private final Assignment cWhereclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereclauseYWhereParserRuleCall_4_0 = (RuleCall)cWhereclauseAssignment_4.eContents().get(0);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetYPropertyCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetYPropertyIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetYPropertyCrossReference_6_0.eContents().get(1);
		
		//YReadEachStatement:
		//	'db-read-each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
		//	'target' target=[YProperty];
		@Override public ParserRule getRule() { return rule; }
		
		//'db-read-each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere? 'target'
		//target=[YProperty]
		public Group getGroup() { return cGroup; }
		
		//'db-read-each'
		public Keyword getDbReadEachKeyword_0() { return cDbReadEachKeyword_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_1() { return cStructsAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_1_0() { return cStructsYStructRefPairParserRuleCall_1_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_1_0() { return cStructsYStructRefPairParserRuleCall_2_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_3() { return cJoinclauseAssignment_3; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_3_0() { return cJoinclauseYJoinParserRuleCall_3_0; }
		
		//whereclause=YWhere?
		public Assignment getWhereclauseAssignment_4() { return cWhereclauseAssignment_4; }
		
		//YWhere
		public RuleCall getWhereclauseYWhereParserRuleCall_4_0() { return cWhereclauseYWhereParserRuleCall_4_0; }
		
		//'target'
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }
		
		//target=[YProperty]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[YProperty]
		public CrossReference getTargetYPropertyCrossReference_6_0() { return cTargetYPropertyCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetYPropertyIDTerminalRuleCall_6_0_1() { return cTargetYPropertyIDTerminalRuleCall_6_0_1; }
	}
	public class YCreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YCreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSetBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetBlockYBlockParserRuleCall_3_0 = (RuleCall)cSetBlockAssignment_3.eContents().get(0);
		
		//YCreateStatement:
		//	'db-create' struct=YStructRefPair
		//	'set' setBlock=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'db-create' struct=YStructRefPair 'set' setBlock=YBlock
		public Group getGroup() { return cGroup; }
		
		//'db-create'
		public Keyword getDbCreateKeyword_0() { return cDbCreateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//'set'
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }
		
		//setBlock=YBlock
		public Assignment getSetBlockAssignment_3() { return cSetBlockAssignment_3; }
		
		//YBlock
		public RuleCall getSetBlockYBlockParserRuleCall_3_0() { return cSetBlockYBlockParserRuleCall_3_0; }
	}
	public class YUpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YUpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSetBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetBlockYBlockParserRuleCall_3_0 = (RuleCall)cSetBlockAssignment_3.eContents().get(0);
		
		//YUpdateStatement:
		//	'db-update' struct=YStructRefPair
		//	'set' setBlock=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'db-update' struct=YStructRefPair 'set' setBlock=YBlock
		public Group getGroup() { return cGroup; }
		
		//'db-update'
		public Keyword getDbUpdateKeyword_0() { return cDbUpdateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//'set'
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }
		
		//setBlock=YBlock
		public Assignment getSetBlockAssignment_3() { return cSetBlockAssignment_3; }
		
		//YBlock
		public RuleCall getSetBlockYBlockParserRuleCall_3_0() { return cSetBlockYBlockParserRuleCall_3_0; }
	}
	public class YDeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YDeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YDeleteStatement:
		//	'db-delete' struct=YStructRefPair ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'db-delete' struct=YStructRefPair ';'
		public Group getGroup() { return cGroup; }
		
		//'db-delete'
		public Keyword getDbDeleteKeyword_0() { return cDbDeleteKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YAssociateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YAssociateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbAssociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJoinrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinrefYJoinDefParserRuleCall_3_0 = (RuleCall)cJoinrefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAssociateStatement:
		//	'db-associate' struct=YStructRefPair 'with' joinref=YJoinDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'db-associate' struct=YStructRefPair 'with' joinref=YJoinDef ';'
		public Group getGroup() { return cGroup; }
		
		//'db-associate'
		public Keyword getDbAssociateKeyword_0() { return cDbAssociateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//joinref=YJoinDef
		public Assignment getJoinrefAssignment_3() { return cJoinrefAssignment_3; }
		
		//YJoinDef
		public RuleCall getJoinrefYJoinDefParserRuleCall_3_0() { return cJoinrefYJoinDefParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class YDisassociateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YDisassociateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDbDisassociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJoinrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinrefYJoinDefParserRuleCall_3_0 = (RuleCall)cJoinrefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YDisassociateStatement:
		//	'db-disassociate' struct=YStructRefPair 'from' joinref=YJoinDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'db-disassociate' struct=YStructRefPair 'from' joinref=YJoinDef ';'
		public Group getGroup() { return cGroup; }
		
		//'db-disassociate'
		public Keyword getDbDisassociateKeyword_0() { return cDbDisassociateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//joinref=YJoinDef
		public Assignment getJoinrefAssignment_3() { return cJoinrefAssignment_3; }
		
		//YJoinDef
		public RuleCall getJoinrefYJoinDefParserRuleCall_3_0() { return cJoinrefYJoinDefParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class YStructRefPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YStructRefPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructpropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStructpropertyYPropertyCrossReference_0_0 = (CrossReference)cStructpropertyAssignment_0.eContents().get(0);
		private final RuleCall cStructpropertyYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cStructpropertyYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStructclassYAnnotEntityCrossReference_2_0 = (CrossReference)cStructclassAssignment_2.eContents().get(0);
		private final RuleCall cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cStructclassYAnnotEntityCrossReference_2_0.eContents().get(1);
		
		//YStructRefPair:
		//	structproperty=[YProperty] '=>' structclass=[model::YAnnotEntity];
		@Override public ParserRule getRule() { return rule; }
		
		//structproperty=[YProperty] '=>' structclass=[model::YAnnotEntity]
		public Group getGroup() { return cGroup; }
		
		//structproperty=[YProperty]
		public Assignment getStructpropertyAssignment_0() { return cStructpropertyAssignment_0; }
		
		//[YProperty]
		public CrossReference getStructpropertyYPropertyCrossReference_0_0() { return cStructpropertyYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getStructpropertyYPropertyIDTerminalRuleCall_0_0_1() { return cStructpropertyYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//structclass=[model::YAnnotEntity]
		public Assignment getStructclassAssignment_2() { return cStructclassAssignment_2; }
		
		//[model::YAnnotEntity]
		public CrossReference getStructclassYAnnotEntityCrossReference_2_0() { return cStructclassYAnnotEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getStructclassYAnnotEntityIDTerminalRuleCall_2_0_1() { return cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1; }
	}
	public class YJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJoindefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoindefsYJoinDefParserRuleCall_2_0 = (RuleCall)cJoindefsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJoindefsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cJoindefsYJoinDefParserRuleCall_3_1_0 = (RuleCall)cJoindefsAssignment_3_1.eContents().get(0);
		
		//YJoin:
		//	{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*
		public Group getGroup() { return cGroup; }
		
		//{YJoin}
		public Action getYJoinAction_0() { return cYJoinAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//joindefs+=YJoinDef
		public Assignment getJoindefsAssignment_2() { return cJoindefsAssignment_2; }
		
		//YJoinDef
		public RuleCall getJoindefsYJoinDefParserRuleCall_2_0() { return cJoindefsYJoinDefParserRuleCall_2_0; }
		
		//("," joindefs+=YJoinDef)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//joindefs+=YJoinDef
		public Assignment getJoindefsAssignment_3_1() { return cJoindefsAssignment_3_1; }
		
		//YJoinDef
		public RuleCall getJoindefsYJoinDefParserRuleCall_3_1_0() { return cJoindefsYJoinDefParserRuleCall_3_1_0; }
	}
	public class YJoinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YJoinDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromViewAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromViewYPropertyCrossReference_0_0 = (CrossReference)cFromViewAssignment_0.eContents().get(0);
		private final RuleCall cFromViewYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cFromViewYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelRefYAnnotRelationshipCrossReference_2_0 = (CrossReference)cRelRefAssignment_2.eContents().get(0);
		private final RuleCall cRelRefYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelRefYAnnotRelationshipCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToViewAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToViewYPropertyCrossReference_4_0 = (CrossReference)cToViewAssignment_4.eContents().get(0);
		private final RuleCall cToViewYPropertyIDTerminalRuleCall_4_0_1 = (RuleCall)cToViewYPropertyCrossReference_4_0.eContents().get(1);
		
		//YJoinDef:
		//	fromView=[YProperty] '=>' relRef=[model::YAnnotRelationship|QualifiedName] '=>' toView=[YProperty];
		@Override public ParserRule getRule() { return rule; }
		
		//fromView=[YProperty] '=>' relRef=[model::YAnnotRelationship|QualifiedName] '=>' toView=[YProperty]
		public Group getGroup() { return cGroup; }
		
		//fromView=[YProperty]
		public Assignment getFromViewAssignment_0() { return cFromViewAssignment_0; }
		
		//[YProperty]
		public CrossReference getFromViewYPropertyCrossReference_0_0() { return cFromViewYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getFromViewYPropertyIDTerminalRuleCall_0_0_1() { return cFromViewYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//relRef=[model::YAnnotRelationship|QualifiedName]
		public Assignment getRelRefAssignment_2() { return cRelRefAssignment_2; }
		
		//[model::YAnnotRelationship|QualifiedName]
		public CrossReference getRelRefYAnnotRelationshipCrossReference_2_0() { return cRelRefYAnnotRelationshipCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelRefYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1() { return cRelRefYAnnotRelationshipQualifiedNameParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//toView=[YProperty]
		public Assignment getToViewAssignment_4() { return cToViewAssignment_4; }
		
		//[YProperty]
		public CrossReference getToViewYPropertyCrossReference_4_0() { return cToViewYPropertyCrossReference_4_0; }
		
		//ID
		public RuleCall getToViewYPropertyIDTerminalRuleCall_4_0_1() { return cToViewYPropertyIDTerminalRuleCall_4_0_1; }
	}
	public class YWhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YWhere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYWhereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//YWhere:
		//	{YWhere} 'where' expression=YOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{YWhere} 'where' expression=YOrExpression
		public Group getGroup() { return cGroup; }
		
		//{YWhere}
		public Action getYWhereAction_0() { return cYWhereAction_0; }
		
		//'where'
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
	}
	public class YWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyYBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//YWhileStatement:
		//	'while' '(' expression=YOrExpression ')'
		//	body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expression=YOrExpression ')' body=YBlock
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=YBlock
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_4_0() { return cBodyYBlockParserRuleCall_4_0; }
	}
	public class YRepeatWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YRepeatWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyYBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YRepeatWhileStatement:
		//	'repeat'
		//	body=YBlock
		//	'while' '(' expression=YOrExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' body=YBlock 'while' '(' expression=YOrExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//body=YBlock
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_1_0() { return cBodyYBlockParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_4_0() { return cExpressionYOrExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class YForInStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YForInStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemYPropertyCrossReference_1_0 = (CrossReference)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemYPropertyIDTerminalRuleCall_1_0_1 = (RuleCall)cItemYPropertyCrossReference_1_0.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCollectionYPropertyCrossReference_3_0 = (CrossReference)cCollectionAssignment_3.eContents().get(0);
		private final RuleCall cCollectionYPropertyIDTerminalRuleCall_3_0_1 = (RuleCall)cCollectionYPropertyCrossReference_3_0.eContents().get(1);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyYBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//YForInStatement:
		//	'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//item=[YProperty]
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//[YProperty]
		public CrossReference getItemYPropertyCrossReference_1_0() { return cItemYPropertyCrossReference_1_0; }
		
		//ID
		public RuleCall getItemYPropertyIDTerminalRuleCall_1_0_1() { return cItemYPropertyIDTerminalRuleCall_1_0_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//collection=[YProperty]
		public Assignment getCollectionAssignment_3() { return cCollectionAssignment_3; }
		
		//[YProperty]
		public CrossReference getCollectionYPropertyCrossReference_3_0() { return cCollectionYPropertyCrossReference_3_0; }
		
		//ID
		public RuleCall getCollectionYPropertyIDTerminalRuleCall_3_0_1() { return cCollectionYPropertyIDTerminalRuleCall_3_0_1; }
		
		//body=YBlock
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_4_0() { return cBodyYBlockParserRuleCall_4_0; }
	}
	
	public class YAccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.base.Lang.YAccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUBLICPublicKeyword_2_0 = (Keyword)cPUBLICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum YAccessLevel:
		//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
		public EnumRule getRule() { return rule; }
		
		//PRIVATE='private' | PROTECTED='protected' | PUBLIC='public'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_2() { return cPUBLICEnumLiteralDeclaration_2; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_2_0() { return cPUBLICPublicKeyword_2_0; }
	}
	
	private final YWidgetElements pYWidget;
	private final YParameterElements pYParameter;
	private final YAccessLevelElements eYAccessLevel;
	private final YArgumentElements pYArgument;
	private final YArgumentValueElements pYArgumentValue;
	private final YEnumerationElements pYEnumeration;
	private final YEnumerationCaseElements pYEnumerationCase;
	private final YClassElements pYClass;
	private final YMemberElements pYMember;
	private final YTypedDeclarationElements pYTypedDeclaration;
	private final YPropertyElements pYProperty;
	private final YTuplesElements pYTuples;
	private final YFunctionElements pYFunction;
	private final YBlockElements pYBlock;
	private final YStatementElements pYStatement;
	private final YDoStatementElements pYDoStatement;
	private final YCatchElements pYCatch;
	private final YCatchBlockElements pYCatchBlock;
	private final YVariableDeclarationElements pYVariableDeclaration;
	private final YThrowElements pYThrow;
	private final YReturnElements pYReturn;
	private final YIfStatementElements pYIfStatement;
	private final YSwitchStatementElements pYSwitchStatement;
	private final YSwitchCaseElements pYSwitchCase;
	private final YSymbolElements pYSymbol;
	private final YNamedElementElements pYNamedElement;
	private final YExpressionElements pYExpression;
	private final YAssignmentElements pYAssignment;
	private final YSelectionExpressionElements pYSelectionExpression;
	private final OpSingleAssignElements pOpSingleAssign;
	private final YOrExpressionElements pYOrExpression;
	private final OpOrElements pOpOr;
	private final YAndExpressionElements pYAndExpression;
	private final OpAndElements pOpAnd;
	private final YEqualityExpressionElements pYEqualityExpression;
	private final YComparisonExpressionElements pYComparisonExpression;
	private final OpCompareElements pOpCompare;
	private final YAdditiveExpressionElements pYAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final YMultiplicativeExpressionElements pYMultiplicativeExpression;
	private final YPrimaryElements pYPrimary;
	private final YTerminalExpressionElements pYTerminalExpression;
	private final YReadStatementElements pYReadStatement;
	private final YReadEachStatementElements pYReadEachStatement;
	private final YCreateStatementElements pYCreateStatement;
	private final YUpdateStatementElements pYUpdateStatement;
	private final YDeleteStatementElements pYDeleteStatement;
	private final YAssociateStatementElements pYAssociateStatement;
	private final YDisassociateStatementElements pYDisassociateStatement;
	private final YStructRefPairElements pYStructRefPair;
	private final YJoinElements pYJoin;
	private final YJoinDefElements pYJoinDef;
	private final YWhereElements pYWhere;
	private final YWhileStatementElements pYWhileStatement;
	private final YRepeatWhileStatementElements pYRepeatWhileStatement;
	private final YForInStatementElements pYForInStatement;
	
	private final Grammar grammar;
	
	private final ModelGrammarAccess gaModel;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LangGrammarAccess(GrammarProvider grammarProvider,
			ModelGrammarAccess gaModel,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaModel = gaModel;
		this.gaTerminals = gaTerminals;
		this.pYWidget = new YWidgetElements();
		this.pYParameter = new YParameterElements();
		this.eYAccessLevel = new YAccessLevelElements();
		this.pYArgument = new YArgumentElements();
		this.pYArgumentValue = new YArgumentValueElements();
		this.pYEnumeration = new YEnumerationElements();
		this.pYEnumerationCase = new YEnumerationCaseElements();
		this.pYClass = new YClassElements();
		this.pYMember = new YMemberElements();
		this.pYTypedDeclaration = new YTypedDeclarationElements();
		this.pYProperty = new YPropertyElements();
		this.pYTuples = new YTuplesElements();
		this.pYFunction = new YFunctionElements();
		this.pYBlock = new YBlockElements();
		this.pYStatement = new YStatementElements();
		this.pYDoStatement = new YDoStatementElements();
		this.pYCatch = new YCatchElements();
		this.pYCatchBlock = new YCatchBlockElements();
		this.pYVariableDeclaration = new YVariableDeclarationElements();
		this.pYThrow = new YThrowElements();
		this.pYReturn = new YReturnElements();
		this.pYIfStatement = new YIfStatementElements();
		this.pYSwitchStatement = new YSwitchStatementElements();
		this.pYSwitchCase = new YSwitchCaseElements();
		this.pYSymbol = new YSymbolElements();
		this.pYNamedElement = new YNamedElementElements();
		this.pYExpression = new YExpressionElements();
		this.pYAssignment = new YAssignmentElements();
		this.pYSelectionExpression = new YSelectionExpressionElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pYOrExpression = new YOrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pYAndExpression = new YAndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pYEqualityExpression = new YEqualityExpressionElements();
		this.pYComparisonExpression = new YComparisonExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pYAdditiveExpression = new YAdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pYMultiplicativeExpression = new YMultiplicativeExpressionElements();
		this.pYPrimary = new YPrimaryElements();
		this.pYTerminalExpression = new YTerminalExpressionElements();
		this.pYReadStatement = new YReadStatementElements();
		this.pYReadEachStatement = new YReadEachStatementElements();
		this.pYCreateStatement = new YCreateStatementElements();
		this.pYUpdateStatement = new YUpdateStatementElements();
		this.pYDeleteStatement = new YDeleteStatementElements();
		this.pYAssociateStatement = new YAssociateStatementElements();
		this.pYDisassociateStatement = new YDisassociateStatementElements();
		this.pYStructRefPair = new YStructRefPairElements();
		this.pYJoin = new YJoinElements();
		this.pYJoinDef = new YJoinDefElements();
		this.pYWhere = new YWhereElements();
		this.pYWhileStatement = new YWhileStatementElements();
		this.pYRepeatWhileStatement = new YRepeatWhileStatementElements();
		this.pYForInStatement = new YForInStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.jgen.notes.dmw.lite.base.Lang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ModelGrammarAccess getModelGrammarAccess() {
		return gaModel;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//YWidget:
	//	'package' name=QualifiedName ';'?
	//	imports+=YImport*
	//	enums+=YEnumeration*
	//	classes+=YClass*;
	public YWidgetElements getYWidgetAccess() {
		return pYWidget;
	}
	
	public ParserRule getYWidgetRule() {
		return getYWidgetAccess().getRule();
	}
	
	//YParameter:
	//	YTypedDeclaration | YJoinDef;
	public YParameterElements getYParameterAccess() {
		return pYParameter;
	}
	
	public ParserRule getYParameterRule() {
		return getYParameterAccess().getRule();
	}
	
	//enum YAccessLevel:
	//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
	public YAccessLevelElements getYAccessLevelAccess() {
		return eYAccessLevel;
	}
	
	public EnumRule getYAccessLevelRule() {
		return getYAccessLevelAccess().getRule();
	}
	
	//YArgument:
	//	name=ValidID ':' value=YArgumentValue;
	public YArgumentElements getYArgumentAccess() {
		return pYArgument;
	}
	
	public ParserRule getYArgumentRule() {
		return getYArgumentAccess().getRule();
	}
	
	//YArgumentValue:
	//	INT | STRING;
	public YArgumentValueElements getYArgumentValueAccess() {
		return pYArgumentValue;
	}
	
	public ParserRule getYArgumentValueRule() {
		return getYArgumentValueAccess().getRule();
	}
	
	//YEnumeration:
	//	{YEnumeration} 'enum' name=ValidID (':' superclass=[YEnumeration|QualifiedName])? '{'
	//	cases+=YEnumerationCase*
	//	'}';
	public YEnumerationElements getYEnumerationAccess() {
		return pYEnumeration;
	}
	
	public ParserRule getYEnumerationRule() {
		return getYEnumerationAccess().getRule();
	}
	
	//YEnumerationCase:
	//	{YEnumerationCase}
	//	'case' name=ValidID ('(' (params+=YParameter (',' params+=YParameter)*)? ')')?;
	public YEnumerationCaseElements getYEnumerationCaseAccess() {
		return pYEnumerationCase;
	}
	
	public ParserRule getYEnumerationCaseRule() {
		return getYEnumerationCaseAccess().getRule();
	}
	
	//YClass:
	//	{YClass} 'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('=>'
	//	entityRef=[model::YAnnotEntity|QualifiedName])?
	//	'{'
	//	inners+=YClass*
	//	members+=YMember*
	//	'}';
	public YClassElements getYClassAccess() {
		return pYClass;
	}
	
	public ParserRule getYClassRule() {
		return getYClassAccess().getRule();
	}
	
	//YMember:
	//	YProperty | YFunction;
	public YMemberElements getYMemberAccess() {
		return pYMember;
	}
	
	public ParserRule getYMemberRule() {
		return getYMemberAccess().getRule();
	}
	
	//fragment YTypedDeclaration *:
	//	name=ValidID ':' type=[YClass|QualifiedName];
	public YTypedDeclarationElements getYTypedDeclarationAccess() {
		return pYTypedDeclaration;
	}
	
	public ParserRule getYTypedDeclarationRule() {
		return getYTypedDeclarationAccess().getRule();
	}
	
	//YProperty:
	//	access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('=>'
	//	attrRef=[model::YAnnotAttribute|QualifiedName])?
	//	';';
	public YPropertyElements getYPropertyAccess() {
		return pYProperty;
	}
	
	public ParserRule getYPropertyRule() {
		return getYPropertyAccess().getRule();
	}
	
	//YTuples:
	//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
	public YTuplesElements getYTuplesAccess() {
		return pYTuples;
	}
	
	public ParserRule getYTuplesRule() {
		return getYTuplesAccess().getRule();
	}
	
	//YFunction:
	//	access=YAccessLevel? 'func' name=ValidID
	//	'(' (params+=YParameter (',' params+=YParameter)*)? ')' throw?='throws' returnvalue?='->'?
	//	type=[YClass|QualifiedName]?
	//	body=YBlock;
	public YFunctionElements getYFunctionAccess() {
		return pYFunction;
	}
	
	public ParserRule getYFunctionRule() {
		return getYFunctionAccess().getRule();
	}
	
	//YBlock:
	//	{YBlock} '{' statements+=YStatement* '}';
	public YBlockElements getYBlockAccess() {
		return pYBlock;
	}
	
	public ParserRule getYBlockRule() {
		return getYBlockAccess().getRule();
	}
	
	//YStatement:
	//	YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
	//	YDisassociateStatement | YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement |
	//	YForInStatement | YExpression ';'? | YIfStatement | YThrow | YDoStatement | YSwitchStatement;
	public YStatementElements getYStatementAccess() {
		return pYStatement;
	}
	
	public ParserRule getYStatementRule() {
		return getYStatementAccess().getRule();
	}
	
	//YDoStatement:
	//	{YDoStatement} 'do'
	//	block=YBlock
	//	catches+=YCatch*;
	public YDoStatementElements getYDoStatementAccess() {
		return pYDoStatement;
	}
	
	public ParserRule getYDoStatementRule() {
		return getYDoStatementAccess().getRule();
	}
	
	//YCatch:
	//	{YCatch} 'catch' exception=[YEnumerationCase|QualifiedName] catchBlock=YCatchBlock;
	public YCatchElements getYCatchAccess() {
		return pYCatch;
	}
	
	public ParserRule getYCatchRule() {
		return getYCatchAccess().getRule();
	}
	
	//YCatchBlock:
	//	{YCatchBlock} '{' statements+=YStatement* '}';
	public YCatchBlockElements getYCatchBlockAccess() {
		return pYCatchBlock;
	}
	
	public ParserRule getYCatchBlockRule() {
		return getYCatchBlockAccess().getRule();
	}
	
	//YVariableDeclaration:
	//	YTypedDeclaration '=' expression=YOrExpression ';';
	public YVariableDeclarationElements getYVariableDeclarationAccess() {
		return pYVariableDeclaration;
	}
	
	public ParserRule getYVariableDeclarationRule() {
		return getYVariableDeclarationAccess().getRule();
	}
	
	//YThrow:
	//	{YThrow} 'throw' exception=[YEnumerationCase|QualifiedName]
	//	'(' (arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
	//	';'?;
	public YThrowElements getYThrowAccess() {
		return pYThrow;
	}
	
	public ParserRule getYThrowRule() {
		return getYThrowAccess().getRule();
	}
	
	//YReturn:
	//	{YReturn} 'return' expression=YOrExpression? ';';
	public YReturnElements getYReturnAccess() {
		return pYReturn;
	}
	
	public ParserRule getYReturnRule() {
		return getYReturnAccess().getRule();
	}
	
	//YIfStatement:
	//	'if' '(' expression=YOrExpression ')' thenBlock=YBlock (=> 'else' elseBlock=YBlock)?;
	public YIfStatementElements getYIfStatementAccess() {
		return pYIfStatement;
	}
	
	public ParserRule getYIfStatementRule() {
		return getYIfStatementAccess().getRule();
	}
	
	//YSwitchStatement:
	//	{YSwitchStatement}
	//	'switch' switchExpression=YExpression '{'
	//	cases+=YSwitchCase* ('default' ':' default=YBlock)?
	//	'}';
	public YSwitchStatementElements getYSwitchStatementAccess() {
		return pYSwitchStatement;
	}
	
	public ParserRule getYSwitchStatementRule() {
		return getYSwitchStatementAccess().getRule();
	}
	
	//YSwitchCase:
	//	{YSwitchCase} ('case' caseExpression=YExpression)?
	//	':' then=YBlock;
	public YSwitchCaseElements getYSwitchCaseAccess() {
		return pYSwitchCase;
	}
	
	public ParserRule getYSwitchCaseRule() {
		return getYSwitchCaseAccess().getRule();
	}
	
	//YSymbol:
	//	YVariableDeclaration | YParameter;
	public YSymbolElements getYSymbolAccess() {
		return pYSymbol;
	}
	
	public ParserRule getYSymbolRule() {
		return getYSymbolAccess().getRule();
	}
	
	//YNamedElement:
	//	YClass | YMember | YSymbol;
	public YNamedElementElements getYNamedElementAccess() {
		return pYNamedElement;
	}
	
	public ParserRule getYNamedElementRule() {
		return getYNamedElementAccess().getRule();
	}
	
	//YExpression:
	//	YAssignment;
	public YExpressionElements getYExpressionAccess() {
		return pYExpression;
	}
	
	public ParserRule getYExpressionRule() {
		return getYExpressionAccess().getRule();
	}
	
	//YAssignment YExpression:
	//	YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?;
	public YAssignmentElements getYAssignmentAccess() {
		return pYAssignment;
	}
	
	public ParserRule getYAssignmentRule() {
		return getYAssignmentAccess().getRule();
	}
	
	//YSelectionExpression YExpression:
	//	YTerminalExpression ({YMemberSelection.receiver=current} '.'
	//	member=[YMember] (functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*;
	public YSelectionExpressionElements getYSelectionExpressionAccess() {
		return pYSelectionExpression;
	}
	
	public ParserRule getYSelectionExpressionRule() {
		return getYSelectionExpressionAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ OpSingleAssign:
	//	'=';
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//YOrExpression YExpression:
	//	YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*;
	public YOrExpressionElements getYOrExpressionAccess() {
		return pYOrExpression;
	}
	
	public ParserRule getYOrExpressionRule() {
		return getYOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//YAndExpression YExpression:
	//	YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*;
	public YAndExpressionElements getYAndExpressionAccess() {
		return pYAndExpression;
	}
	
	public ParserRule getYAndExpressionRule() {
		return getYAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//YEqualityExpression YExpression:
	//	YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*;
	public YEqualityExpressionElements getYEqualityExpressionAccess() {
		return pYEqualityExpression;
	}
	
	public ParserRule getYEqualityExpressionRule() {
		return getYEqualityExpressionAccess().getRule();
	}
	
	//YComparisonExpression YExpression:
	//	YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*;
	public YComparisonExpressionElements getYComparisonExpressionAccess() {
		return pYComparisonExpression;
	}
	
	public ParserRule getYComparisonExpressionRule() {
		return getYComparisonExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<=' | '>' | '<';
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//YAdditiveExpression YExpression:
	//	YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*;
	public YAdditiveExpressionElements getYAdditiveExpressionAccess() {
		return pYAdditiveExpression;
	}
	
	public ParserRule getYAdditiveExpressionRule() {
		return getYAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//YMultiplicativeExpression YExpression:
	//	YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*;
	public YMultiplicativeExpressionElements getYMultiplicativeExpressionAccess() {
		return pYMultiplicativeExpression;
	}
	
	public ParserRule getYMultiplicativeExpressionRule() {
		return getYMultiplicativeExpressionAccess().getRule();
	}
	
	//YPrimary YExpression:
	//	{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression;
	public YPrimaryElements getYPrimaryAccess() {
		return pYPrimary;
	}
	
	public ParserRule getYPrimaryRule() {
		return getYPrimaryAccess().getRule();
	}
	
	//YTerminalExpression YExpression:
	//	{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self'
	//	| {YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
	//	(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
	//	//|	'(' YOrExpression ')'
	//;
	public YTerminalExpressionElements getYTerminalExpressionAccess() {
		return pYTerminalExpression;
	}
	
	public ParserRule getYTerminalExpressionRule() {
		return getYTerminalExpressionAccess().getRule();
	}
	
	//YReadStatement:
	//	'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?;
	public YReadStatementElements getYReadStatementAccess() {
		return pYReadStatement;
	}
	
	public ParserRule getYReadStatementRule() {
		return getYReadStatementAccess().getRule();
	}
	
	//YReadEachStatement:
	//	'db-read-each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
	//	'target' target=[YProperty];
	public YReadEachStatementElements getYReadEachStatementAccess() {
		return pYReadEachStatement;
	}
	
	public ParserRule getYReadEachStatementRule() {
		return getYReadEachStatementAccess().getRule();
	}
	
	//YCreateStatement:
	//	'db-create' struct=YStructRefPair
	//	'set' setBlock=YBlock;
	public YCreateStatementElements getYCreateStatementAccess() {
		return pYCreateStatement;
	}
	
	public ParserRule getYCreateStatementRule() {
		return getYCreateStatementAccess().getRule();
	}
	
	//YUpdateStatement:
	//	'db-update' struct=YStructRefPair
	//	'set' setBlock=YBlock;
	public YUpdateStatementElements getYUpdateStatementAccess() {
		return pYUpdateStatement;
	}
	
	public ParserRule getYUpdateStatementRule() {
		return getYUpdateStatementAccess().getRule();
	}
	
	//YDeleteStatement:
	//	'db-delete' struct=YStructRefPair ';';
	public YDeleteStatementElements getYDeleteStatementAccess() {
		return pYDeleteStatement;
	}
	
	public ParserRule getYDeleteStatementRule() {
		return getYDeleteStatementAccess().getRule();
	}
	
	//YAssociateStatement:
	//	'db-associate' struct=YStructRefPair 'with' joinref=YJoinDef ';';
	public YAssociateStatementElements getYAssociateStatementAccess() {
		return pYAssociateStatement;
	}
	
	public ParserRule getYAssociateStatementRule() {
		return getYAssociateStatementAccess().getRule();
	}
	
	//YDisassociateStatement:
	//	'db-disassociate' struct=YStructRefPair 'from' joinref=YJoinDef ';';
	public YDisassociateStatementElements getYDisassociateStatementAccess() {
		return pYDisassociateStatement;
	}
	
	public ParserRule getYDisassociateStatementRule() {
		return getYDisassociateStatementAccess().getRule();
	}
	
	//YStructRefPair:
	//	structproperty=[YProperty] '=>' structclass=[model::YAnnotEntity];
	public YStructRefPairElements getYStructRefPairAccess() {
		return pYStructRefPair;
	}
	
	public ParserRule getYStructRefPairRule() {
		return getYStructRefPairAccess().getRule();
	}
	
	//YJoin:
	//	{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*;
	public YJoinElements getYJoinAccess() {
		return pYJoin;
	}
	
	public ParserRule getYJoinRule() {
		return getYJoinAccess().getRule();
	}
	
	//YJoinDef:
	//	fromView=[YProperty] '=>' relRef=[model::YAnnotRelationship|QualifiedName] '=>' toView=[YProperty];
	public YJoinDefElements getYJoinDefAccess() {
		return pYJoinDef;
	}
	
	public ParserRule getYJoinDefRule() {
		return getYJoinDefAccess().getRule();
	}
	
	//YWhere:
	//	{YWhere} 'where' expression=YOrExpression;
	public YWhereElements getYWhereAccess() {
		return pYWhere;
	}
	
	public ParserRule getYWhereRule() {
		return getYWhereAccess().getRule();
	}
	
	//YWhileStatement:
	//	'while' '(' expression=YOrExpression ')'
	//	body=YBlock;
	public YWhileStatementElements getYWhileStatementAccess() {
		return pYWhileStatement;
	}
	
	public ParserRule getYWhileStatementRule() {
		return getYWhileStatementAccess().getRule();
	}
	
	//YRepeatWhileStatement:
	//	'repeat'
	//	body=YBlock
	//	'while' '(' expression=YOrExpression ')';
	public YRepeatWhileStatementElements getYRepeatWhileStatementAccess() {
		return pYRepeatWhileStatement;
	}
	
	public ParserRule getYRepeatWhileStatementRule() {
		return getYRepeatWhileStatementAccess().getRule();
	}
	
	//YForInStatement:
	//	'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock;
	public YForInStatementElements getYForInStatementAccess() {
		return pYForInStatement;
	}
	
	public ParserRule getYForInStatementRule() {
		return getYForInStatementAccess().getRule();
	}
	
	//YModel:
	//	'package' name=QualifiedName ';'?
	//	imports+=YImport*
	//	annotations+=YAnnotation*;
	public ModelGrammarAccess.YModelElements getYModelAccess() {
		return gaModel.getYModelAccess();
	}
	
	public ParserRule getYModelRule() {
		return getYModelAccess().getRule();
	}
	
	//YImport:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public ModelGrammarAccess.YImportElements getYImportAccess() {
		return gaModel.getYImportAccess();
	}
	
	public ParserRule getYImportRule() {
		return getYImportAccess().getRule();
	}
	
	//YAnnotation:
	//	YAnnotEntity | YAnnotTechnicalDesign;
	public ModelGrammarAccess.YAnnotationElements getYAnnotationAccess() {
		return gaModel.getYAnnotationAccess();
	}
	
	public ParserRule getYAnnotationRule() {
		return getYAnnotationAccess().getRule();
	}
	
	///*
	// * Data model
	// */ YAnnotEntity:
	//	{YAnnotEntity}
	//	'@entity' name=ValidID (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? '{'
	//	annotations+=YAnnotEntityInner*
	//	'}';
	public ModelGrammarAccess.YAnnotEntityElements getYAnnotEntityAccess() {
		return gaModel.getYAnnotEntityAccess();
	}
	
	public ParserRule getYAnnotEntityRule() {
		return getYAnnotEntityAccess().getRule();
	}
	
	//YAnnotAttribute:
	//	{YAnnotAttribute} '@attribute' name=ValidID optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? ';'?;
	public ModelGrammarAccess.YAnnotAttributeElements getYAnnotAttributeAccess() {
		return gaModel.getYAnnotAttributeAccess();
	}
	
	public ParserRule getYAnnotAttributeRule() {
		return getYAnnotAttributeAccess().getRule();
	}
	
	//YAnnotRelationship:
	//	{YAnnotRelationship} '@relationship' name=ValidID optional?='?'? '->'
	//	target=[YAnnotEntity|QualifiedName] many?='*'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)? ')')? ('<-' inverse=[YAnnotRelationship|QualifiedName])? ';'?;
	public ModelGrammarAccess.YAnnotRelationshipElements getYAnnotRelationshipAccess() {
		return gaModel.getYAnnotRelationshipAccess();
	}
	
	public ParserRule getYAnnotRelationshipRule() {
		return getYAnnotRelationshipAccess().getRule();
	}
	
	//YAnnotIdInner:
	//	YAnnotAttribute | YAnnotRelationship;
	public ModelGrammarAccess.YAnnotIdInnerElements getYAnnotIdInnerAccess() {
		return gaModel.getYAnnotIdInnerAccess();
	}
	
	public ParserRule getYAnnotIdInnerRule() {
		return getYAnnotIdInnerAccess().getRule();
	}
	
	//YAnnotIdentifier:
	//	{YAnnotIdentifier} '@identifier' name=ValidID '(' annots+=[YAnnotIdInner] (',' annots+=[YAnnotIdInner])* ')' ';'?;
	public ModelGrammarAccess.YAnnotIdentifierElements getYAnnotIdentifierAccess() {
		return gaModel.getYAnnotIdentifierAccess();
	}
	
	public ParserRule getYAnnotIdentifierRule() {
		return getYAnnotIdentifierAccess().getRule();
	}
	
	//YAnnotationElementValuePair:
	//	=> (name=ValidID '=') value=YAnnotExpression;
	public ModelGrammarAccess.YAnnotationElementValuePairElements getYAnnotationElementValuePairAccess() {
		return gaModel.getYAnnotationElementValuePairAccess();
	}
	
	public ParserRule getYAnnotationElementValuePairRule() {
		return getYAnnotationElementValuePairAccess().getRule();
	}
	
	//YAnnotEntityInner:
	//	YAnnotAttribute | YAnnotRelationship | YAnnotIdentifier;
	public ModelGrammarAccess.YAnnotEntityInnerElements getYAnnotEntityInnerAccess() {
		return gaModel.getYAnnotEntityInnerAccess();
	}
	
	public ParserRule getYAnnotEntityInnerRule() {
		return getYAnnotEntityInnerAccess().getRule();
	}
	
	//YAnnotExpression:
	//	{YAnnotKeyword} value=ValidID | {YAnnotStringConstant} value=STRING | {YAnnotNumberConstant} value=Number |
	//	{YAnnotBoolConstant} value=('true' | 'false') | {YAnnotArray} => ('[') (elements+=YAnnotExpression (','
	//	elements+=YAnnotExpression)*)? ']';
	public ModelGrammarAccess.YAnnotExpressionElements getYAnnotExpressionAccess() {
		return gaModel.getYAnnotExpressionAccess();
	}
	
	public ParserRule getYAnnotExpressionRule() {
		return getYAnnotExpressionAccess().getRule();
	}
	
	///*
	// * Start Technical design
	// */ YAnnotTechnicalDesign:
	//	{YAnnotTechnicalDesign} '@td' name=ValidID (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')') '{'
	//	features+=YAnnotTable*
	//	'}';
	public ModelGrammarAccess.YAnnotTechnicalDesignElements getYAnnotTechnicalDesignAccess() {
		return gaModel.getYAnnotTechnicalDesignAccess();
	}
	
	public ParserRule getYAnnotTechnicalDesignRule() {
		return getYAnnotTechnicalDesignAccess().getRule();
	}
	
	//YAnnotTable:
	//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn*
	//	primarykey=YAnnotPrimaryKey?
	//	foreignkeys+=YAnnotForeignKey*
	//	'}';
	public ModelGrammarAccess.YAnnotTableElements getYAnnotTableAccess() {
		return gaModel.getYAnnotTableAccess();
	}
	
	public ParserRule getYAnnotTableRule() {
		return getYAnnotTableAccess().getRule();
	}
	
	//YAnnotColumn:
	//	{YAnnotColumn} '->' attrref=[YAnnotAttribute|QualifiedName]
	//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
	//	'BOOLEAN') optional='?'? (=> '(' (elementValuePairs+=YAnnotationElementValuePair (','
	//	elementValuePairs+=YAnnotationElementValuePair)*)?
	//	')')? ';'?;
	public ModelGrammarAccess.YAnnotColumnElements getYAnnotColumnAccess() {
		return gaModel.getYAnnotColumnAccess();
	}
	
	public ParserRule getYAnnotColumnRule() {
		return getYAnnotColumnAccess().getRule();
	}
	
	//YAnnotColumnLike:
	//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
	public ModelGrammarAccess.YAnnotColumnLikeElements getYAnnotColumnLikeAccess() {
		return gaModel.getYAnnotColumnLikeAccess();
	}
	
	public ParserRule getYAnnotColumnLikeRule() {
		return getYAnnotColumnLikeAccess().getRule();
	}
	
	//YAnnotAbstractColumn:
	//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
	public ModelGrammarAccess.YAnnotAbstractColumnElements getYAnnotAbstractColumnAccess() {
		return gaModel.getYAnnotAbstractColumnAccess();
	}
	
	public ParserRule getYAnnotAbstractColumnRule() {
		return getYAnnotAbstractColumnAccess().getRule();
	}
	
	//YAnnotPrimaryKey:
	//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
	public ModelGrammarAccess.YAnnotPrimaryKeyElements getYAnnotPrimaryKeyAccess() {
		return gaModel.getYAnnotPrimaryKeyAccess();
	}
	
	public ParserRule getYAnnotPrimaryKeyRule() {
		return getYAnnotPrimaryKeyAccess().getRule();
	}
	
	//YAnnotForeignKey:
	//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRelationship|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
	//	'}' ';'?;
	public ModelGrammarAccess.YAnnotForeignKeyElements getYAnnotForeignKeyAccess() {
		return gaModel.getYAnnotForeignKeyAccess();
	}
	
	public ParserRule getYAnnotForeignKeyRule() {
		return getYAnnotForeignKeyAccess().getRule();
	}
	
	////	/*
	//// * Swift Generation Annotations
	//// */
	////YAnnotJava:
	////	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
	////
	////	/*
	//// * Swift Generation Annotations
	//// */
	////YAnnotSwift:
	////	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
	////
	/////*
	//// * Database Generation Annotations
	//// */
	////YAnnotDatabase:
	////	{YAnnotDatabase} '@database' name=ValidID ';'?;
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public ModelGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaModel.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public ModelGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaModel.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public ModelGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaModel.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//Number hidden():
	//	INT ('.' INT)?;
	public ModelGrammarAccess.NumberElements getNumberAccess() {
		return gaModel.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
