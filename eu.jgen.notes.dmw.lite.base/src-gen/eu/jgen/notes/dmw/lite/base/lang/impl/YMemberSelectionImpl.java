/**
 * generated by Xtext 2.21.0
 */
package eu.jgen.notes.dmw.lite.base.lang.impl;

import eu.jgen.notes.dmw.lite.base.lang.LangPackage;
import eu.jgen.notes.dmw.lite.base.lang.YExpression;
import eu.jgen.notes.dmw.lite.base.lang.YMember;
import eu.jgen.notes.dmw.lite.base.lang.YMemberSelection;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>YMember Selection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.jgen.notes.dmw.lite.base.lang.impl.YMemberSelectionImpl#getReceiver <em>Receiver</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.base.lang.impl.YMemberSelectionImpl#getMember <em>Member</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.base.lang.impl.YMemberSelectionImpl#isFunctioninvocation <em>Functioninvocation</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.base.lang.impl.YMemberSelectionImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class YMemberSelectionImpl extends YExpressionImpl implements YMemberSelection
{
  /**
   * The cached value of the '{@link #getReceiver() <em>Receiver</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReceiver()
   * @generated
   * @ordered
   */
  protected YExpression receiver;

  /**
   * The cached value of the '{@link #getMember() <em>Member</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMember()
   * @generated
   * @ordered
   */
  protected YMember member;

  /**
   * The default value of the '{@link #isFunctioninvocation() <em>Functioninvocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunctioninvocation()
   * @generated
   * @ordered
   */
  protected static final boolean FUNCTIONINVOCATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFunctioninvocation() <em>Functioninvocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunctioninvocation()
   * @generated
   * @ordered
   */
  protected boolean functioninvocation = FUNCTIONINVOCATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<YExpression> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YMemberSelectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.YMEMBER_SELECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public YExpression getReceiver()
  {
    return receiver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReceiver(YExpression newReceiver, NotificationChain msgs)
  {
    YExpression oldReceiver = receiver;
    receiver = newReceiver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.YMEMBER_SELECTION__RECEIVER, oldReceiver, newReceiver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReceiver(YExpression newReceiver)
  {
    if (newReceiver != receiver)
    {
      NotificationChain msgs = null;
      if (receiver != null)
        msgs = ((InternalEObject)receiver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.YMEMBER_SELECTION__RECEIVER, null, msgs);
      if (newReceiver != null)
        msgs = ((InternalEObject)newReceiver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.YMEMBER_SELECTION__RECEIVER, null, msgs);
      msgs = basicSetReceiver(newReceiver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.YMEMBER_SELECTION__RECEIVER, newReceiver, newReceiver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public YMember getMember()
  {
    if (member != null && member.eIsProxy())
    {
      InternalEObject oldMember = (InternalEObject)member;
      member = (YMember)eResolveProxy(oldMember);
      if (member != oldMember)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.YMEMBER_SELECTION__MEMBER, oldMember, member));
      }
    }
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YMember basicGetMember()
  {
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMember(YMember newMember)
  {
    YMember oldMember = member;
    member = newMember;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.YMEMBER_SELECTION__MEMBER, oldMember, member));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFunctioninvocation()
  {
    return functioninvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunctioninvocation(boolean newFunctioninvocation)
  {
    boolean oldFunctioninvocation = functioninvocation;
    functioninvocation = newFunctioninvocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.YMEMBER_SELECTION__FUNCTIONINVOCATION, oldFunctioninvocation, functioninvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<YExpression> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<YExpression>(YExpression.class, this, LangPackage.YMEMBER_SELECTION__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.YMEMBER_SELECTION__RECEIVER:
        return basicSetReceiver(null, msgs);
      case LangPackage.YMEMBER_SELECTION__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.YMEMBER_SELECTION__RECEIVER:
        return getReceiver();
      case LangPackage.YMEMBER_SELECTION__MEMBER:
        if (resolve) return getMember();
        return basicGetMember();
      case LangPackage.YMEMBER_SELECTION__FUNCTIONINVOCATION:
        return isFunctioninvocation();
      case LangPackage.YMEMBER_SELECTION__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.YMEMBER_SELECTION__RECEIVER:
        setReceiver((YExpression)newValue);
        return;
      case LangPackage.YMEMBER_SELECTION__MEMBER:
        setMember((YMember)newValue);
        return;
      case LangPackage.YMEMBER_SELECTION__FUNCTIONINVOCATION:
        setFunctioninvocation((Boolean)newValue);
        return;
      case LangPackage.YMEMBER_SELECTION__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends YExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.YMEMBER_SELECTION__RECEIVER:
        setReceiver((YExpression)null);
        return;
      case LangPackage.YMEMBER_SELECTION__MEMBER:
        setMember((YMember)null);
        return;
      case LangPackage.YMEMBER_SELECTION__FUNCTIONINVOCATION:
        setFunctioninvocation(FUNCTIONINVOCATION_EDEFAULT);
        return;
      case LangPackage.YMEMBER_SELECTION__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.YMEMBER_SELECTION__RECEIVER:
        return receiver != null;
      case LangPackage.YMEMBER_SELECTION__MEMBER:
        return member != null;
      case LangPackage.YMEMBER_SELECTION__FUNCTIONINVOCATION:
        return functioninvocation != FUNCTIONINVOCATION_EDEFAULT;
      case LangPackage.YMEMBER_SELECTION__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (functioninvocation: ");
    result.append(functioninvocation);
    result.append(')');
    return result.toString();
  }

} //YMemberSelectionImpl
