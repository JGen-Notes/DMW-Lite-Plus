/*
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dmw.lite.base.formatting2

import eu.jgen.notes.dmw.lite.base.lang.LangPackage
import eu.jgen.notes.dmw.lite.base.lang.YBlock
import eu.jgen.notes.dmw.lite.base.lang.YClass
import eu.jgen.notes.dmw.lite.base.lang.YCreateStatement
import eu.jgen.notes.dmw.lite.base.lang.YFunction
import eu.jgen.notes.dmw.lite.base.lang.YProperty
import eu.jgen.notes.dmw.lite.base.lang.YStructRefPair
import eu.jgen.notes.dmw.lite.base.lang.YTuples
import eu.jgen.notes.dmw.lite.base.lang.YWidget
import eu.jgen.notes.dmw.lite.mdl.model.ModelPackage
import eu.jgen.notes.dmw.lite.mdl.model.YImport
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class LangFormatter extends AbstractFormatter2 {


	def dispatch void format(YWidget widget, extension IFormattableDocument document) {
		widget.regionFor.keyword("package").append[oneSpace]
		widget.regionFor.feature(LangPackage.eINSTANCE.YWidget_Name).append[noSpace]

		for (YImport yImport : widget.getImports()) {
			yImport.format;
		}

		for (YClass clazz : widget.getClasses()) {
			clazz.format;

		}
	}

	def dispatch void format(YClass clazz, extension IFormattableDocument document) {
		clazz.regionFor.keyword("class").prepend[newLine].append[oneSpace]
		clazz.regionFor.keyword(":").surround[oneSpace]
		clazz.regionFor.feature(LangPackage.eINSTANCE.YClass_Superclass).surround[oneSpace]
		clazz.regionFor.keyword("->").surround[oneSpace]
		clazz.regionFor.feature(LangPackage.eINSTANCE.YClass_EntityRef).surround[oneSpace]
		clazz.regionFor.keyword("{").prepend[oneSpace].append[newLine]
		clazz.inners.forEach [ innerClazz |
			innerClazz.interior[indent].prepend[newLine].format
		]
		clazz.interior[indent].members.forEach [ member |
				if (member instanceof YProperty) {
					(member as YProperty).format
				} else if (member instanceof YFunction) {
					(member as YFunction).format
				}
			]		
		clazz.regionFor.keyword("}").prepend[newLine].append[newLine]
	}

	def dispatch void format(YProperty property, extension IFormattableDocument document) {
	 	if(property.access !== null) {
	 		property.regionFor.keyword(property.access.getName).prepend[newLine].append[oneSpace]
	 		property.regionFor.keyword("var").prepend[oneSpace].append[oneSpace]
	 	} else {
	 			property.regionFor.keyword("var").prepend[newLine].append[oneSpace]
	 	}	
		property.regionFor.feature(LangPackage.eINSTANCE.YNamedElement_Name).surround[oneSpace]
		property.tuples.format
		property.regionFor.keyword(":").surround[oneSpace]
		property.regionFor.keyword("->").surround[oneSpace]
		property.regionFor.feature(LangPackage.eINSTANCE.YProperty_AttrRef.surround[oneSpace])
		property.regionFor.keyword(";").append[newLine]
		
	}
	
	def dispatch void format(YFunction function, extension IFormattableDocument document) {
		    if(function.access !== null) {
	 		    function.regionFor.keyword(function.access.getName).prepend[newLine].append[oneSpace]
	 		    function.regionFor.keyword("func").prepend[oneSpace].append[oneSpace]
	 	    } else {
	 			function.regionFor.keyword("func").prepend[newLine].append[oneSpace]
	 	    }
			function.regionFor.feature(LangPackage.eINSTANCE.YNamedElement_Name).prepend[oneSpace].append[noSpace]
			function.regionFor.keyword("(").prepend[noSpace].append[noSpace]
			function.params.forEach[param |
				param.regionFor.feature(LangPackage.eINSTANCE.YNamedElement_Name).prepend[noSpace].append[oneSpace]
				param.regionFor.keyword(":").prepend[oneSpace].append[oneSpace]
				param.type.prepend[oneSpace].append[noSpace]
				function.regionFor.keyword(",").prepend[noSpace].append[noSpace]
			]
			function.regionFor.keyword(")").prepend[noSpace].append[oneSpace]
			function.regionFor.keyword("->").surround[oneSpace]
			function.regionFor.feature(LangPackage.eINSTANCE.YFunction_Returnvalue.surround[oneSpace])
		    function.body.format
	}
	
	def dispatch void format(YBlock block, extension IFormattableDocument document) {
			block.regionFor.keyword("{").prepend[oneSpace].append[newLine]
			block.interior[indent].statements.forEach[format]
			block.regionFor.keyword("}").prepend[newLine]
	}
	
	def dispatch void format(YCreateStatement createStatement, extension IFormattableDocument document) {
		createStatement.regionFor.keyword("create").prepend[newLine].append[oneSpace]
		createStatement.struct.format
		createStatement.setBlock.format
		createStatement.regionFor.keyword("success").prepend[newLine].append[oneSpace]
		createStatement.success.format
		createStatement.regionFor.keyword("already").prepend[newLine].append[oneSpace]
		createStatement.regionFor.keyword("exist").prepend[oneSpace].append[oneSpace]
		createStatement.alreadyExist.format
	}
	
	def dispatch void format(YStructRefPair structRefPair, extension IFormattableDocument document) {
		structRefPair.regionFor.feature(LangPackage.eINSTANCE.YStructRefPair_Structproperty).prepend[oneSpace].append[oneSpace]
        structRefPair.regionFor.keyword(":").prepend[oneSpace].append[oneSpace]
		structRefPair.regionFor.feature(LangPackage.eINSTANCE.YStructRefPair_Structclass).prepend[oneSpace].append[oneSpace]
	}

	def dispatch void format(YTuples tuples, extension IFormattableDocument document) {
		tuples.regionFor.keyword("<").prepend[oneSpace].append[noSpace]
		tuples.regionFor.keyword(",").prepend[noSpace].append[noSpace]
		tuples.regionFor.keyword(">").prepend[noSpace].append[oneSpace]
	}

	def dispatch void format(YImport imp, extension IFormattableDocument document) {
		imp.regionFor.keyword("import").prepend[newLine].append[oneSpace]
		imp.regionFor.feature(ModelPackage.eINSTANCE.YImport_ImportedNamespace)
	}

	

}
