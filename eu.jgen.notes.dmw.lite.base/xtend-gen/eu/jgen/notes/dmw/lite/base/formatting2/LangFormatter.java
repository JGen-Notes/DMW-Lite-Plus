/**
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dmw.lite.base.formatting2;

import eu.jgen.notes.dmw.lite.base.lang.LangPackage;
import eu.jgen.notes.dmw.lite.base.lang.YAccessLevel;
import eu.jgen.notes.dmw.lite.base.lang.YBlock;
import eu.jgen.notes.dmw.lite.base.lang.YClass;
import eu.jgen.notes.dmw.lite.base.lang.YCreateStatement;
import eu.jgen.notes.dmw.lite.base.lang.YFunction;
import eu.jgen.notes.dmw.lite.base.lang.YMember;
import eu.jgen.notes.dmw.lite.base.lang.YParameter;
import eu.jgen.notes.dmw.lite.base.lang.YProperty;
import eu.jgen.notes.dmw.lite.base.lang.YStatement;
import eu.jgen.notes.dmw.lite.base.lang.YStructRefPair;
import eu.jgen.notes.dmw.lite.base.lang.YTuples;
import eu.jgen.notes.dmw.lite.base.lang.YWidget;
import eu.jgen.notes.dmw.lite.mdl.model.ModelPackage;
import eu.jgen.notes.dmw.lite.mdl.model.YImport;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class LangFormatter extends AbstractFormatter2 {
  protected void _format(final YWidget widget, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(widget).keyword("package"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(widget).feature(LangPackage.eINSTANCE.getYWidget_Name()), _function_1);
    EList<YImport> _imports = widget.getImports();
    for (final YImport yImport : _imports) {
      document.<YImport>format(yImport);
    }
    EList<YClass> _classes = widget.getClasses();
    for (final YClass clazz : _classes) {
      document.<YClass>format(clazz);
    }
  }
  
  protected void _format(final YClass clazz, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(clazz).keyword("class"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(clazz).keyword(":"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(clazz).feature(LangPackage.eINSTANCE.getYClass_Superclass()), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(clazz).keyword("->"), _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(clazz).feature(LangPackage.eINSTANCE.getYClass_EntityRef()), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(clazz).keyword("{"), _function_6), _function_7);
    final Consumer<YClass> _function_8 = (YClass innerClazz) -> {
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<YClass>format(document.<YClass>prepend(document.<YClass>interior(innerClazz, _function_9), _function_10));
    };
    clazz.getInners().forEach(_function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    final Consumer<YMember> _function_10 = (YMember member) -> {
      if ((member instanceof YProperty)) {
        document.<YProperty>format(((YProperty) member));
      } else {
        if ((member instanceof YFunction)) {
          document.<YFunction>format(((YFunction) member));
        }
      }
    };
    document.<YClass>interior(clazz, _function_9).getMembers().forEach(_function_10);
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(clazz).keyword("}"), _function_11), _function_12);
  }
  
  protected void _format(final YProperty property, @Extension final IFormattableDocument document) {
    YAccessLevel _access = property.getAccess();
    boolean _tripleNotEquals = (_access != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(property).keyword(property.getAccess().getName()), _function), _function_1);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(property).keyword("var"), _function_2), _function_3);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(property).keyword("var"), _function_4), _function_5);
    }
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(property).feature(LangPackage.eINSTANCE.getYNamedElement_Name()), _function_6);
    document.<YTuples>format(property.getTuples());
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(property).keyword(":"), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(property).keyword("->"), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    this.textRegionExtensions.regionFor(property).feature(document.<EReference>surround(LangPackage.eINSTANCE.getYProperty_AttrRef(), _function_9));
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(property).keyword(";"), _function_10);
  }
  
  protected void _format(final YFunction function, @Extension final IFormattableDocument document) {
    YAccessLevel _access = function.getAccess();
    boolean _tripleNotEquals = (_access != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword(function.getAccess().getName()), _function), _function_1);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword("func"), _function_2), _function_3);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword("func"), _function_4), _function_5);
    }
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(function).feature(LangPackage.eINSTANCE.getYNamedElement_Name()), _function_6), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword("("), _function_8), _function_9);
    final Consumer<YParameter> _function_10 = (YParameter param) -> {
      final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(param).feature(LangPackage.eINSTANCE.getYNamedElement_Name()), _function_11), _function_12);
      final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(param).keyword(":"), _function_13), _function_14);
      final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<YClass>append(document.<YClass>prepend(param.getType(), _function_15), _function_16);
      final Procedure1<IHiddenRegionFormatter> _function_17 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_18 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword(","), _function_17), _function_18);
    };
    function.getParams().forEach(_function_10);
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(function).keyword(")"), _function_11), _function_12);
    final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(function).keyword("->"), _function_13);
    final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    this.textRegionExtensions.regionFor(function).feature(document.<EAttribute>surround(LangPackage.eINSTANCE.getYFunction_Returnvalue(), _function_14));
    document.<YBlock>format(function.getBody());
  }
  
  protected void _format(final YBlock block, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(block).keyword("{"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    final Consumer<YStatement> _function_3 = (YStatement it) -> {
      document.<YStatement>format(it);
    };
    document.<YBlock>interior(block, _function_2).getStatements().forEach(_function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(block).keyword("}"), _function_4);
  }
  
  protected void _format(final YCreateStatement createStatement, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(createStatement).keyword("create"), _function), _function_1);
    document.<YStructRefPair>format(createStatement.getStruct());
    document.<YBlock>format(createStatement.getSetBlock());
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(createStatement).keyword("success"), _function_2), _function_3);
    document.<YBlock>format(createStatement.getSuccess());
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(createStatement).keyword("already"), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(createStatement).keyword("exist"), _function_6), _function_7);
    document.<YBlock>format(createStatement.getAlreadyExist());
  }
  
  protected void _format(final YStructRefPair structRefPair, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(structRefPair).feature(LangPackage.eINSTANCE.getYStructRefPair_Structproperty()), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(structRefPair).keyword(":"), _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(structRefPair).feature(LangPackage.eINSTANCE.getYStructRefPair_Structclass()), _function_4), _function_5);
  }
  
  protected void _format(final YTuples tuples, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(tuples).keyword("<"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(tuples).keyword(","), _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(tuples).keyword(">"), _function_4), _function_5);
  }
  
  protected void _format(final YImport imp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(imp).keyword("import"), _function), _function_1);
    this.textRegionExtensions.regionFor(imp).feature(ModelPackage.eINSTANCE.getYImport_ImportedNamespace());
  }
  
  public void format(final Object function, final IFormattableDocument document) {
    if (function instanceof YFunction) {
      _format((YFunction)function, document);
      return;
    } else if (function instanceof YProperty) {
      _format((YProperty)function, document);
      return;
    } else if (function instanceof XtextResource) {
      _format((XtextResource)function, document);
      return;
    } else if (function instanceof YClass) {
      _format((YClass)function, document);
      return;
    } else if (function instanceof YCreateStatement) {
      _format((YCreateStatement)function, document);
      return;
    } else if (function instanceof YBlock) {
      _format((YBlock)function, document);
      return;
    } else if (function instanceof YStructRefPair) {
      _format((YStructRefPair)function, document);
      return;
    } else if (function instanceof YTuples) {
      _format((YTuples)function, document);
      return;
    } else if (function instanceof YWidget) {
      _format((YWidget)function, document);
      return;
    } else if (function instanceof YImport) {
      _format((YImport)function, document);
      return;
    } else if (function instanceof EObject) {
      _format((EObject)function, document);
      return;
    } else if (function == null) {
      _format((Void)null, document);
      return;
    } else if (function != null) {
      _format(function, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(function, document).toString());
    }
  }
}
